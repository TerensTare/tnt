<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="_bit_flags_8hpp" kind="file" language="C++">
    <compoundname>BitFlags.hpp</compoundname>
    <includes local="no">type_traits</includes>
    <includedby refid="_im_gui_8hpp" local="yes">E:/thing/cpp/tnt/include/imgui/ImGui.hpp</includedby>
    <includedby refid="_lua_loader_8hpp" local="yes">E:/thing/cpp/tnt/include/tolua/LuaLoader.hpp</includedby>
    <includedby refid="_tn_t_8hpp" local="yes">E:/thing/cpp/tnt/include/TnT.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>type_traits</label>
      </node>
      <node id="1">
        <label>E:/thing/cpp/tnt/include/utils/BitFlags.hpp</label>
        <link refid="_bit_flags_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structtnt_1_1enable__bit__mask" prot="public">tnt::enable_bit_mask</innerclass>
    <innernamespace refid="namespacetnt">tnt</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="_bit_flags_8hpp_1a390352634b68c7458272e745527ba3c4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>tnt::bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr E</type>
        <definition>constexpr E operator|</definition>
        <argsstring>(E const &amp;a, E const &amp;b)</argsstring>
        <name>operator|</name>
        <param>
          <type>E const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>E const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="48" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="_bit_flags_8hpp_1a1aed5f2f7550d61766ec73cd1746a5e6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>tnt::bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr E</type>
        <definition>constexpr E operator&amp;</definition>
        <argsstring>(E const &amp;a, E const &amp;b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>E const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>E const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="56" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="_bit_flags_8hpp_1abf057bfe26b249975c0cb77585923938" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>tnt::bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr E</type>
        <definition>constexpr E operator^</definition>
        <argsstring>(E const &amp;a, E const &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type>E const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>E const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="64" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="_bit_flags_8hpp_1a51f09566a32933ab5632f0b5a0f6c6ce" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>tnt::bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr E</type>
        <definition>constexpr E operator~</definition>
        <argsstring>(E const &amp;a)</argsstring>
        <name>operator~</name>
        <param>
          <type>E const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="72" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="_bit_flags_8hpp_1ab95f75bedf5ce4e448b00bf8268aed33" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>tnt::bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr E &amp;</type>
        <definition>constexpr E&amp; operator|=</definition>
        <argsstring>(E &amp;a, E const &amp;b)</argsstring>
        <name>operator|=</name>
        <param>
          <type>E &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>E const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="79" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="_bit_flags_8hpp_1aeb36d2cb24105a87a0b3706f39fde585" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>tnt::bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr E &amp;</type>
        <definition>constexpr E&amp; operator&amp;=</definition>
        <argsstring>(E &amp;a, E const &amp;b)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>E &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>E const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="88" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="_bit_flags_8hpp_1ad1ecfecec53becefb1f318acd57b65f2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>tnt::bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr E &amp;</type>
        <definition>constexpr E&amp; operator^=</definition>
        <argsstring>(E &amp;a, E const &amp;b)</argsstring>
        <name>operator^=</name>
        <param>
          <type>E &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>E const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="97" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="97" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>TNT_UTILS_ENUM_CLASS_BIT_FLAGS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TNT_UTILS_ENUM_CLASS_BIT_FLAGS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tnt</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thx<sp/>Anthony<sp/>Williams<sp/>for<sp/>all<sp/>of<sp/>the<sp/>content<sp/>of<sp/>this<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://blog.bitwigglers.org/using-enum-classes-as-type-safe-bitmasks/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>concept<sp/>enum_type<sp/>=<sp/>std::is_enum_v&lt;T&gt;;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;enum_type<sp/>E&gt;</highlight></codeline>
<codeline lineno="15" refid="structtnt_1_1enable__bit__mask" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtnt_1_1enable__bit__mask" kindref="compound">enable_bit_mask</ref><sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>concept<sp/>bit_mask<sp/>=<sp/>enum_type&lt;T&gt;<sp/>&amp;&amp;<sp/>(<ref refid="structtnt_1_1enable__bit__mask" kindref="compound">enable_bit_mask&lt;T&gt;::value</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_flag(E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;bit,<sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;flag)<sp/>noexcept</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((bit<sp/>&amp;<sp/>flag)<sp/>==<sp/>flag);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_flag(E<sp/>&amp;bit,<sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;flag)<sp/>noexcept</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit<sp/>|=<sp/>flag;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unset_flag(E<sp/>&amp;bit,<sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;flag)<sp/>noexcept</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit<sp/>&amp;=<sp/>~flag;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flip_flag(E<sp/>&amp;bit,<sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;flag)<sp/>noexcept</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit<sp/>^=<sp/>flag;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tnt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;tnt::bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">constexpr<sp/>E<sp/>operator|(E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::underlying_type_t&lt;E&gt;;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">E</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a)<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;tnt::bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">constexpr<sp/>E<sp/>operator&amp;(E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::underlying_type_t&lt;E&gt;;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">E</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a)<sp/>&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;tnt::bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">constexpr<sp/>E<sp/>operator^(E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::underlying_type_t&lt;E&gt;;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">E</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a)<sp/>^<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;tnt::bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">constexpr<sp/>E<sp/>operator~(E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::underlying_type_t&lt;E&gt;;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">E</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(~static_cast&lt;type&gt;(a));</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;tnt::bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">constexpr<sp/>E<sp/>&amp;operator|=(E<sp/>&amp;a,<sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::underlying_type_t&lt;E&gt;;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">E</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a)<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;tnt::bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">constexpr<sp/>E<sp/>&amp;operator&amp;=(E<sp/>&amp;a,<sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::underlying_type_t&lt;E&gt;;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">E</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a)<sp/>&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;tnt::bit_mask<sp/>E&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">constexpr<sp/>E<sp/>&amp;operator^=(E<sp/>&amp;a,<sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::underlying_type_t&lt;E&gt;;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">E</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a)<sp/>^<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//!TNT_UTILS_ENUM_CLASS_BIT_FLAGS_HPP</highlight></codeline>
    </programlisting>
    <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp"/>
  </compounddef>
</doxygen>
