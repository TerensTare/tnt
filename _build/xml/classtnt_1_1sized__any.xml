<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classtnt_1_1sized__any" kind="class" language="C++" prot="public" final="yes">
    <compoundname>tnt::sized_any</compoundname>
    <templateparamlist>
      <param>
        <type>std::size_t</type>
        <declname>S</declname>
        <defname>S</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtnt_1_1sized__any_1a74d938a425edea0bcc38d4b6ba9abb3c" prot="private" static="no">
        <type>void(<ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref> &amp;)</type>
        <definition>using tnt::sized_any&lt; S &gt;::dtor_fn =  void(sized_any &amp;)</definition>
        <argsstring></argsstring>
        <name>dtor_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="253" column="9" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classtnt_1_1sized__any_1acd2ca7dbc44a8de48407d1d135844bc9" prot="private" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>Si</declname>
            <defname>Si</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t tnt::sized_any&lt; S &gt;::buff_size</definition>
        <argsstring></argsstring>
        <name>buff_size</name>
        <initializer>{Si}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="248" column="45" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtnt_1_1sized__any_1a0aadf14c82ed4765c6b1c9b6700e6c88" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* tnt::sized_any&lt; S &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="255" column="14" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtnt_1_1sized__any_1a1ea5ab02a71b7eeebf7d27903d3334d9" prot="private" static="no" mutable="no">
        <type>dtor_fn *</type>
        <definition>dtor_fn* tnt::sized_any&lt; S &gt;::dtor</definition>
        <argsstring></argsstring>
        <name>dtor</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="256" column="17" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtnt_1_1sized__any_1a9d16e50e48b50686608c0365e9954215" prot="private" static="no" mutable="no">
        <type><ref refid="classtnt_1_1type__info" kindref="compound">tnt::type_info</ref></type>
        <definition>tnt::type_info tnt::sized_any&lt; S &gt;::info</definition>
        <argsstring></argsstring>
        <name>info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="257" column="24" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtnt_1_1sized__any_1a3d66713d6b62e79d42c9bceecadeb8db" prot="private" static="no" mutable="no">
        <type>std::byte</type>
        <definition>std::byte tnt::sized_any&lt; S &gt;::buff[buff_size&lt; S &gt;]</definition>
        <argsstring>[buff_size&lt; S &gt;]</argsstring>
        <name>buff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="258" column="19" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="258" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtnt_1_1sized__any_1aacf8479e76f1fff9cf9f023ca39c4774" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr tnt::sized_any&lt; S &gt;::sized_any</definition>
        <argsstring>() noexcept</argsstring>
        <name>sized_any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="60" column="19" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="60" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1a55967697f20990b61479334a73398901" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>S2</declname>
            <defname>S2</defname>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr tnt::sized_any&lt; S &gt;::sized_any</definition>
        <argsstring>(sized_any&lt; S2 &gt; const &amp;other) noexcept</argsstring>
        <name>sized_any</name>
        <param>
          <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt; S2 &gt; const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="64" column="19" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="64" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1ab454b6730ecdd41f82f80f7fbd7e9dc5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>S2</declname>
            <defname>S2</defname>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr tnt::sized_any&lt; S &gt;::sized_any</definition>
        <argsstring>(sized_any&lt; S2 &gt; &amp;&amp;other) noexcept</argsstring>
        <name>sized_any</name>
        <param>
          <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt; S2 &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="77" column="19" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="77" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1ad85c244f3430024eff6128c802c38b8d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>detail::not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr tnt::sized_any&lt; S &gt;::sized_any</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>sized_any</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="91" column="19" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1a3ab058eeec25bc2955c4ba4e26bf8e56" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>detail::not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr std::constructible_from&lt; T, Args... &gt;</type>
        <definition>requires constexpr std::constructible_from&lt;T, Args...&gt; tnt::sized_any&lt; S &gt;::sized_any</definition>
        <argsstring>(tnt::in_place_tag_t&lt; T &gt;, Args &amp;&amp;... args) noexcept(std::is_nothrow_constructible_v&lt; T, Args... &gt;)</argsstring>
        <name>sized_any</name>
        <param>
          <type><ref refid="structtnt_1_1in__place__tag__t" kindref="compound">tnt::in_place_tag_t</ref>&lt; T &gt;</type>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="100" column="61" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="100" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1a77e8fb83996c0600a3a449bc0aeea0d0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>S2</declname>
            <defname>S2</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref> &amp;</type>
        <definition>constexpr sized_any&amp; tnt::sized_any&lt; S &gt;::operator=</definition>
        <argsstring>(sized_any&lt; S2 &gt; const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt; S2 &gt; const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="108" column="29" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1a372ef3b12e8e25e0160576d0b95c787b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>S2</declname>
            <defname>S2</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref> &amp;</type>
        <definition>constexpr sized_any&amp; tnt::sized_any&lt; S &gt;::operator=</definition>
        <argsstring>(sized_any&lt; S2 &gt; &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt; S2 &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="115" column="29" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="115" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1a27fba9508c5a0aa1ef51972188ffd4b6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref> &amp;</type>
        <definition>constexpr sized_any&amp; tnt::sized_any&lt; S &gt;::operator=</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>operator=</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="123" column="29" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1ade52f266681f5bb5744bc0ceac8c3613" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr tnt::sized_any&lt; S &gt;::~sized_any</definition>
        <argsstring>() noexcept</argsstring>
        <name>~sized_any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="129" column="19" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="129" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1add0057f69fffee1ecaba431a0cf40dfc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>S2</declname>
            <defname>S2</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref> &amp;</type>
        <definition>constexpr sized_any&amp; tnt::sized_any&lt; S &gt;::swap</definition>
        <argsstring>(sized_any&lt; S2 &gt; &amp;other) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt; S2 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="141" column="29" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="141" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1a86fe6eb18de4cdcf27a5869519036084" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void tnt::sized_any&lt; S &gt;::reset</definition>
        <argsstring>() noexcept</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="163" column="24" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="163" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1a31fefab40c731076a35a03e7f45d050f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::sized_any&lt; S &gt;::has_value</definition>
        <argsstring>() noexcept</argsstring>
        <name>has_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="174" column="24" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1aae68497f7c1f9374ba683104edbce536" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr tnt::sized_any&lt; S &gt;::operator bool</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="179" column="28" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1ad24d733c6c98f3c4dd108b90c0ad9709" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classtnt_1_1type__info" kindref="compound">tnt::type_info</ref> &amp;</type>
        <definition>constexpr const tnt::type_info&amp; tnt::sized_any&lt; S &gt;::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="181" column="40" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1a9d052e638e98483d818bb44a025d9335" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>Si</declname>
            <defname>Si</defname>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr tnt::sized_any&lt; S &gt;::operator sized_any&lt; Si &gt;</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator sized_any&lt; Si &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="184" column="19" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1abc6dcd17eb67410240c6c5f9a48ddf4e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr tnt::sized_any&lt; S &gt;::operator T</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="190" column="19" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1a1a67e75a0c460f7c46f2c1dc143ffa43" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr std::constructible_from&lt; T, Args... &gt; void</type>
        <definition>requires constexpr std::constructible_from&lt;T, Args...&gt; void tnt::sized_any&lt; S &gt;::emplace</definition>
        <argsstring>(Args &amp;&amp;...args) noexcept(std::is_nothrow_constructible_v&lt; T, Args... &gt;)</argsstring>
        <name>emplace</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="199" column="24" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="199" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1afdf345e2f7152b9e93f1648a1a2c07a2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T</type>
        <definition>const T tnt::sized_any&lt; S &gt;::to</definition>
        <argsstring>() const noexcept</argsstring>
        <name>to</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="211" column="24" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="211" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1sized__any_1a457a3dfa5f7770c9245e51e5858027b3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T tnt::sized_any&lt; S &gt;::to</definition>
        <argsstring>() noexcept</argsstring>
        <name>to</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="229" column="18" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="229" bodyend="244"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtnt_1_1sized__any_1a1e8653275629a54b103d9268c471a58d" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>constexpr std::size_t</type>
        <definition>static constexpr std::size_t tnt::sized_any&lt; S &gt;::buff_size</definition>
        <argsstring></argsstring>
        <name>buff_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="251" column="33" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="251" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="57" column="5" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="58" bodyend="265"/>
    <listofallmembers>
      <member refid="classtnt_1_1sized__any_1a3d66713d6b62e79d42c9bceecadeb8db" prot="private" virt="non-virtual"><scope>tnt::sized_any</scope><name>buff</name></member>
      <member refid="classtnt_1_1sized__any_1acd2ca7dbc44a8de48407d1d135844bc9" prot="private" virt="non-virtual"><scope>tnt::sized_any</scope><name>buff_size</name></member>
      <member refid="classtnt_1_1sized__any_1a1e8653275629a54b103d9268c471a58d" prot="private" virt="non-virtual"><scope>tnt::sized_any</scope><name>buff_size</name></member>
      <member refid="classtnt_1_1sized__any_1a0aadf14c82ed4765c6b1c9b6700e6c88" prot="private" virt="non-virtual"><scope>tnt::sized_any</scope><name>data</name></member>
      <member refid="classtnt_1_1sized__any_1a1ea5ab02a71b7eeebf7d27903d3334d9" prot="private" virt="non-virtual"><scope>tnt::sized_any</scope><name>dtor</name></member>
      <member refid="classtnt_1_1sized__any_1a74d938a425edea0bcc38d4b6ba9abb3c" prot="private" virt="non-virtual"><scope>tnt::sized_any</scope><name>dtor_fn</name></member>
      <member refid="classtnt_1_1sized__any_1a1a67e75a0c460f7c46f2c1dc143ffa43" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>emplace</name></member>
      <member refid="classtnt_1_1sized__any_1a31fefab40c731076a35a03e7f45d050f" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>has_value</name></member>
      <member refid="classtnt_1_1sized__any_1a9d16e50e48b50686608c0365e9954215" prot="private" virt="non-virtual"><scope>tnt::sized_any</scope><name>info</name></member>
      <member refid="classtnt_1_1sized__any_1aae68497f7c1f9374ba683104edbce536" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>operator bool</name></member>
      <member refid="classtnt_1_1sized__any_1a9d052e638e98483d818bb44a025d9335" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>operator sized_any&lt; Si &gt;</name></member>
      <member refid="classtnt_1_1sized__any_1abc6dcd17eb67410240c6c5f9a48ddf4e" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>operator T</name></member>
      <member refid="classtnt_1_1sized__any_1a77e8fb83996c0600a3a449bc0aeea0d0" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>operator=</name></member>
      <member refid="classtnt_1_1sized__any_1a372ef3b12e8e25e0160576d0b95c787b" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>operator=</name></member>
      <member refid="classtnt_1_1sized__any_1a27fba9508c5a0aa1ef51972188ffd4b6" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>operator=</name></member>
      <member refid="classtnt_1_1sized__any_1a86fe6eb18de4cdcf27a5869519036084" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>reset</name></member>
      <member refid="classtnt_1_1sized__any_1aacf8479e76f1fff9cf9f023ca39c4774" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>sized_any</name></member>
      <member refid="classtnt_1_1sized__any_1a55967697f20990b61479334a73398901" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>sized_any</name></member>
      <member refid="classtnt_1_1sized__any_1ab454b6730ecdd41f82f80f7fbd7e9dc5" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>sized_any</name></member>
      <member refid="classtnt_1_1sized__any_1ad85c244f3430024eff6128c802c38b8d" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>sized_any</name></member>
      <member refid="classtnt_1_1sized__any_1a3ab058eeec25bc2955c4ba4e26bf8e56" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>sized_any</name></member>
      <member refid="classtnt_1_1sized__any_1add0057f69fffee1ecaba431a0cf40dfc" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>swap</name></member>
      <member refid="classtnt_1_1sized__any_1afdf345e2f7152b9e93f1648a1a2c07a2" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>to</name></member>
      <member refid="classtnt_1_1sized__any_1a457a3dfa5f7770c9245e51e5858027b3" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>to</name></member>
      <member refid="classtnt_1_1sized__any_1ad24d733c6c98f3c4dd108b90c0ad9709" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>type</name></member>
      <member refid="classtnt_1_1sized__any_1ade52f266681f5bb5744bc0ceac8c3613" prot="public" virt="non-virtual"><scope>tnt::sized_any</scope><name>~sized_any</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
