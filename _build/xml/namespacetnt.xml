<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="namespacetnt" kind="namespace" language="C++">
    <compoundname>tnt</compoundname>
    <innerclass refid="classtnt_1_1_action" prot="public">tnt::Action</innerclass>
    <innerclass refid="classtnt_1_1action__list" prot="public">tnt::action_list</innerclass>
    <innerclass refid="classtnt_1_1_action_list" prot="public">tnt::ActionList</innerclass>
    <innerclass refid="classtnt_1_1_anchored_spring_force" prot="public">tnt::AnchoredSpringForce</innerclass>
    <innerclass refid="structtnt_1_1android__t" prot="public">tnt::android_t</innerclass>
    <innerclass refid="structtnt_1_1as__sentinel__t" prot="public">tnt::as_sentinel_t</innerclass>
    <innerclass refid="structtnt_1_1asset__cache" prot="public">tnt::asset_cache</innerclass>
    <innerclass refid="classtnt_1_1asset__cache_3_01_mix___chunk_00_01_i_01_4" prot="public">tnt::asset_cache&lt; Mix_Chunk, I &gt;</innerclass>
    <innerclass refid="classtnt_1_1asset__cache_3_01_mix___music_00_01_i_01_4" prot="public">tnt::asset_cache&lt; Mix_Music, I &gt;</innerclass>
    <innerclass refid="classtnt_1_1asset__cache_3_01_s_d_l___texture_00_01_i_01_4" prot="public">tnt::asset_cache&lt; SDL_Texture, I &gt;</innerclass>
    <innerclass refid="classtnt_1_1asset__cache_3_01_texture_atlas_00_01_i_01_4" prot="public">tnt::asset_cache&lt; TextureAtlas, I &gt;</innerclass>
    <innerclass refid="classtnt_1_1asset__cache_3_01_t_t_f___font_00_01_i_01_4" prot="public">tnt::asset_cache&lt; TTF_Font, I &gt;</innerclass>
    <innerclass refid="classtnt_1_1_audio_player" prot="public">tnt::AudioPlayer</innerclass>
    <innerclass refid="structtnt_1_1avx2__t" prot="public">tnt::avx2_t</innerclass>
    <innerclass refid="structtnt_1_1avx__t" prot="public">tnt::avx_t</innerclass>
    <innerclass refid="classtnt_1_1bench__stream" prot="public">tnt::bench_stream</innerclass>
    <innerclass refid="structtnt_1_1_bench_empty_timer" prot="public">tnt::BenchEmptyTimer</innerclass>
    <innerclass refid="classtnt_1_1_bench_valid_timer" prot="public">tnt::BenchValidTimer</innerclass>
    <innerclass refid="structtnt_1_1bind__type__wrapper__fn" prot="public">tnt::bind_type_wrapper_fn</innerclass>
    <innerclass refid="structtnt_1_1bind__value__wrapper__fn" prot="public">tnt::bind_value_wrapper_fn</innerclass>
    <innerclass refid="classtnt_1_1_blocking_action" prot="public">tnt::BlockingAction</innerclass>
    <innerclass refid="classtnt_1_1_bodies_link" prot="public">tnt::BodiesLink</innerclass>
    <innerclass refid="structtnt_1_1bubble__sort__fn" prot="public">tnt::bubble_sort_fn</innerclass>
    <innerclass refid="classtnt_1_1bubble__sort__view" prot="public">tnt::bubble_sort_view</innerclass>
    <innerclass refid="classtnt_1_1_bungee_force" prot="public">tnt::BungeeForce</innerclass>
    <innerclass refid="classtnt_1_1_buoyancy_force" prot="public">tnt::BuoyancyForce</innerclass>
    <innerclass refid="classtnt_1_1_cable_link" prot="public">tnt::CableLink</innerclass>
    <innerclass refid="structtnt_1_1_ceil" prot="public">tnt::Ceil</innerclass>
    <innerclass refid="classtnt_1_1circular__buffer" prot="public">tnt::circular_buffer</innerclass>
    <innerclass refid="structtnt_1_1clang__t" prot="public">tnt::clang_t</innerclass>
    <innerclass refid="classtnt_1_1concurrent__queue" prot="public">tnt::concurrent_queue</innerclass>
    <innerclass refid="classtnt_1_1_contact" prot="public">tnt::Contact</innerclass>
    <innerclass refid="classtnt_1_1_contact_generator" prot="public">tnt::ContactGenerator</innerclass>
    <innerclass refid="classtnt_1_1_contact_resolver" prot="public">tnt::ContactResolver</innerclass>
    <innerclass refid="structtnt_1_1crtp" prot="public">tnt::crtp</innerclass>
    <innerclass refid="classtnt_1_1_delay" prot="public">tnt::Delay</innerclass>
    <innerclass refid="classtnt_1_1_drag_force" prot="public">tnt::DragForce</innerclass>
    <innerclass refid="structtnt_1_1enable__bit__mask" prot="public">tnt::enable_bit_mask</innerclass>
    <innerclass refid="structtnt_1_1enable__bit__mask_3_01_im_gui_1_1_window_flags_01_4" prot="public">tnt::enable_bit_mask&lt; ImGui::WindowFlags &gt;</innerclass>
    <innerclass refid="structtnt_1_1enable__bit__mask_3_01lua_1_1lib_01_4" prot="public">tnt::enable_bit_mask&lt; lua::lib &gt;</innerclass>
    <innerclass refid="structtnt_1_1end__batch__tag" prot="public">tnt::end_batch_tag</innerclass>
    <innerclass refid="classtnt_1_1_expected" prot="public">tnt::Expected</innerclass>
    <innerclass refid="classtnt_1_1_expected_3_01void_01_4" prot="public">tnt::Expected&lt; void &gt;</innerclass>
    <innerclass refid="structtnt_1_1factorial" prot="public">tnt::factorial</innerclass>
    <innerclass refid="structtnt_1_1factorial_3_011_01_4" prot="public">tnt::factorial&lt; 1 &gt;</innerclass>
    <innerclass refid="structtnt_1_1failed__ensure" prot="public">tnt::failed_ensure</innerclass>
    <innerclass refid="classtnt_1_1_fake_spring" prot="public">tnt::FakeSpring</innerclass>
    <innerclass refid="structtnt_1_1fibonacci" prot="public">tnt::fibonacci</innerclass>
    <innerclass refid="structtnt_1_1fibonacci_3_011_01_4" prot="public">tnt::fibonacci&lt; 1 &gt;</innerclass>
    <innerclass refid="structtnt_1_1fibonacci_3_012_01_4" prot="public">tnt::fibonacci&lt; 2 &gt;</innerclass>
    <innerclass refid="classtnt_1_1finally" prot="public">tnt::finally</innerclass>
    <innerclass refid="structtnt_1_1_floor" prot="public">tnt::Floor</innerclass>
    <innerclass refid="structtnt_1_1_floor_3_01_numerator_00_011_01_4" prot="public">tnt::Floor&lt; Numerator, 1 &gt;</innerclass>
    <innerclass refid="classtnt_1_1_force_generator" prot="public">tnt::ForceGenerator</innerclass>
    <innerclass refid="classtnt_1_1_force_registry" prot="public">tnt::ForceRegistry</innerclass>
    <innerclass refid="structtnt_1_1gcc__t" prot="public">tnt::gcc_t</innerclass>
    <innerclass refid="classtnt_1_1generator" prot="public">tnt::generator</innerclass>
    <innerclass refid="classtnt_1_1_gravity_force" prot="public">tnt::GravityForce</innerclass>
    <innerclass refid="structtnt_1_1in__place__tag__t" prot="public">tnt::in_place_tag_t</innerclass>
    <innerclass refid="structtnt_1_1invalid" prot="public">tnt::invalid</innerclass>
    <innerclass refid="structtnt_1_1ios__t" prot="public">tnt::ios_t</innerclass>
    <innerclass refid="structtnt_1_1is__compiler" prot="public">tnt::is_compiler</innerclass>
    <innerclass refid="structtnt_1_1is__compiler_3_01clang__t_01_4" prot="public">tnt::is_compiler&lt; clang_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__compiler_3_01gcc__t_01_4" prot="public">tnt::is_compiler&lt; gcc_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__compiler_3_01msvc__t_01_4" prot="public">tnt::is_compiler&lt; msvc_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__detected" prot="public">tnt::is_detected</innerclass>
    <innerclass refid="structtnt_1_1is__detected_3_01_expression_00_01detail_1_1void__t_3_01_expression_3_01_ts_8_8_8_01_4_01_4_00_01_ts_8_8_8_01_4" prot="public">tnt::is_detected&lt; Expression, detail::void_t&lt; Expression&lt; Ts... &gt; &gt;, Ts... &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__os" prot="public">tnt::is_os</innerclass>
    <innerclass refid="structtnt_1_1is__os_3_01android__t_01_4" prot="public">tnt::is_os&lt; android_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__os_3_01ios__t_01_4" prot="public">tnt::is_os&lt; ios_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__os_3_01linux__t_01_4" prot="public">tnt::is_os&lt; linux_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__os_3_01macos__t_01_4" prot="public">tnt::is_os&lt; macos_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__os_3_01unix__t_01_4" prot="public">tnt::is_os&lt; unix_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__os_3_01windows__t_01_4" prot="public">tnt::is_os&lt; windows_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__simd" prot="public">tnt::is_simd</innerclass>
    <innerclass refid="structtnt_1_1is__simd_3_01avx2__t_01_4" prot="public">tnt::is_simd&lt; avx2_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__simd_3_01avx__t_01_4" prot="public">tnt::is_simd&lt; avx_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__simd_3_01sse2__t_01_4" prot="public">tnt::is_simd&lt; sse2_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__simd_3_01sse3__t_01_4" prot="public">tnt::is_simd&lt; sse3_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__simd_3_01sse4__1__t_01_4" prot="public">tnt::is_simd&lt; sse4_1_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__simd_3_01sse4__2__t_01_4" prot="public">tnt::is_simd&lt; sse4_2_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__simd_3_01sse__t_01_4" prot="public">tnt::is_simd&lt; sse_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__simd_3_01ssse3__t_01_4" prot="public">tnt::is_simd&lt; ssse3_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__simd_3_01x86sse2__t_01_4" prot="public">tnt::is_simd&lt; x86sse2_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1is__simd_3_01x86sse__t_01_4" prot="public">tnt::is_simd&lt; x86sse_t &gt;</innerclass>
    <innerclass refid="structtnt_1_1linux__t" prot="public">tnt::linux_t</innerclass>
    <innerclass refid="structtnt_1_1macos__t" prot="public">tnt::macos_t</innerclass>
    <innerclass refid="structtnt_1_1modulus" prot="public">tnt::modulus</innerclass>
    <innerclass refid="structtnt_1_1msvc__t" prot="public">tnt::msvc_t</innerclass>
    <innerclass refid="structtnt_1_1non__copyable" prot="public">tnt::non_copyable</innerclass>
    <innerclass refid="structtnt_1_1non__movable" prot="public">tnt::non_movable</innerclass>
    <innerclass refid="structtnt_1_1overload" prot="public">tnt::overload</innerclass>
    <innerclass refid="classtnt_1_1_particle" prot="public">tnt::Particle</innerclass>
    <innerclass refid="classtnt_1_1pimpl" prot="public">tnt::pimpl</innerclass>
    <innerclass refid="structtnt_1_1poly__resource" prot="public">tnt::poly_resource</innerclass>
    <innerclass refid="structtnt_1_1power" prot="public">tnt::power</innerclass>
    <innerclass refid="structtnt_1_1power_3_010_00_01_expo_01_4" prot="public">tnt::power&lt; 0, Expo &gt;</innerclass>
    <innerclass refid="structtnt_1_1power_3_011_00_01_expo_01_4" prot="public">tnt::power&lt; 1, Expo &gt;</innerclass>
    <innerclass refid="structtnt_1_1power_3_01_base_00_010_01_4" prot="public">tnt::power&lt; Base, 0 &gt;</innerclass>
    <innerclass refid="structtnt_1_1product" prot="public">tnt::product</innerclass>
    <innerclass refid="structtnt_1_1product_3_01_first_00_01_second_01_4" prot="public">tnt::product&lt; First, Second &gt;</innerclass>
    <innerclass refid="structtnt_1_1_rectangle" prot="public">tnt::Rectangle</innerclass>
    <innerclass refid="classtnt_1_1render__lock" prot="public">tnt::render_lock</innerclass>
    <innerclass refid="classtnt_1_1_rod_link" prot="public">tnt::RodLink</innerclass>
    <innerclass refid="classtnt_1_1scope__fail" prot="public">tnt::scope_fail</innerclass>
    <innerclass refid="classtnt_1_1scope__success" prot="public">tnt::scope_success</innerclass>
    <innerclass refid="classtnt_1_1_single_run_action" prot="public">tnt::SingleRunAction</innerclass>
    <innerclass refid="structtnt_1_1singleton" prot="public">tnt::singleton</innerclass>
    <innerclass refid="structtnt_1_1size__tag__t" prot="public">tnt::size_tag_t</innerclass>
    <innerclass refid="classtnt_1_1sized__any" prot="public">tnt::sized_any</innerclass>
    <innerclass refid="classtnt_1_1_snipper" prot="public">tnt::Snipper</innerclass>
    <innerclass refid="classtnt_1_1sparse__iterator" prot="public">tnt::sparse_iterator</innerclass>
    <innerclass refid="structtnt_1_1sparse__sentinel" prot="public">tnt::sparse_sentinel</innerclass>
    <innerclass refid="classtnt_1_1sparse__set" prot="public">tnt::sparse_set</innerclass>
    <innerclass refid="classtnt_1_1_spring_force" prot="public">tnt::SpringForce</innerclass>
    <innerclass refid="structtnt_1_1sse2__t" prot="public">tnt::sse2_t</innerclass>
    <innerclass refid="structtnt_1_1sse3__t" prot="public">tnt::sse3_t</innerclass>
    <innerclass refid="structtnt_1_1sse4__1__t" prot="public">tnt::sse4_1_t</innerclass>
    <innerclass refid="structtnt_1_1sse4__2__t" prot="public">tnt::sse4_2_t</innerclass>
    <innerclass refid="structtnt_1_1sse__t" prot="public">tnt::sse_t</innerclass>
    <innerclass refid="structtnt_1_1ssse3__t" prot="public">tnt::ssse3_t</innerclass>
    <innerclass refid="classtnt_1_1stack__allocator" prot="public">tnt::stack_allocator</innerclass>
    <innerclass refid="structtnt_1_1start__batch__tag" prot="public">tnt::start_batch_tag</innerclass>
    <innerclass refid="structtnt_1_1sum" prot="public">tnt::sum</innerclass>
    <innerclass refid="structtnt_1_1sum_3_01_first_00_01_second_01_4" prot="public">tnt::sum&lt; First, Second &gt;</innerclass>
    <innerclass refid="structtnt_1_1tag__type__t" prot="public">tnt::tag_type_t</innerclass>
    <innerclass refid="classtnt_1_1task" prot="public">tnt::task</innerclass>
    <innerclass refid="structtnt_1_1template__traits" prot="public">tnt::template_traits</innerclass>
    <innerclass refid="structtnt_1_1template__traits_3_01_t_3_01_args_8_8_8_01_4_01_4" prot="public">tnt::template_traits&lt; T&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="classtnt_1_1_texture_atlas" prot="public">tnt::TextureAtlas</innerclass>
    <innerclass refid="classtnt_1_1_timer" prot="public">tnt::Timer</innerclass>
    <innerclass refid="classtnt_1_1type__info" prot="public">tnt::type_info</innerclass>
    <innerclass refid="structtnt_1_1type__list" prot="public">tnt::type_list</innerclass>
    <innerclass refid="structtnt_1_1type__wrapper__fn" prot="public">tnt::type_wrapper_fn</innerclass>
    <innerclass refid="structtnt_1_1unix__t" prot="public">tnt::unix_t</innerclass>
    <innerclass refid="structtnt_1_1value__wrapper__fn" prot="public">tnt::value_wrapper_fn</innerclass>
    <innerclass refid="structtnt_1_1_vector" prot="public">tnt::Vector</innerclass>
    <innerclass refid="classtnt_1_1vfs__handle" prot="public">tnt::vfs_handle</innerclass>
    <innerclass refid="classtnt_1_1_window" prot="public">tnt::Window</innerclass>
    <innerclass refid="structtnt_1_1windows__t" prot="public">tnt::windows_t</innerclass>
    <innerclass refid="classtnt_1_1_world" prot="public">tnt::World</innerclass>
    <innerclass refid="structtnt_1_1x86sse2__t" prot="public">tnt::x86sse2_t</innerclass>
    <innerclass refid="structtnt_1_1x86sse__t" prot="public">tnt::x86sse_t</innerclass>
    <innerclass refid="classtnt_1_1y__comb" prot="public">tnt::y_comb</innerclass>
    <innernamespace refid="namespacetnt_1_1back">tnt::back</innernamespace>
    <innernamespace refid="namespacetnt_1_1bench">tnt::bench</innernamespace>
    <innernamespace refid="namespacetnt_1_1bounce">tnt::bounce</innernamespace>
    <innernamespace refid="namespacetnt_1_1circular">tnt::circular</innernamespace>
    <innernamespace refid="namespacetnt_1_1convert">tnt::convert</innernamespace>
    <innernamespace refid="namespacetnt_1_1cubic">tnt::cubic</innernamespace>
    <innernamespace refid="namespacetnt_1_1detail">tnt::detail</innernamespace>
    <innernamespace refid="namespacetnt_1_1doo">tnt::doo</innernamespace>
    <innernamespace refid="namespacetnt_1_1elastic">tnt::elastic</innernamespace>
    <innernamespace refid="namespacetnt_1_1exponential">tnt::exponential</innernamespace>
    <innernamespace refid="namespacetnt_1_1_im_gui">tnt::ImGui</innernamespace>
    <innernamespace refid="namespacetnt_1_1input">tnt::input</innernamespace>
    <innernamespace refid="namespacetnt_1_1linear">tnt::linear</innernamespace>
    <innernamespace refid="namespacetnt_1_1logger">tnt::logger</innernamespace>
    <innernamespace refid="namespacetnt_1_1lua">tnt::lua</innernamespace>
    <innernamespace refid="namespacetnt_1_1mirror">tnt::mirror</innernamespace>
    <innernamespace refid="namespacetnt_1_1pcg">tnt::pcg</innernamespace>
    <innernamespace refid="namespacetnt_1_1quad">tnt::quad</innernamespace>
    <innernamespace refid="namespacetnt_1_1quart">tnt::quart</innernamespace>
    <innernamespace refid="namespacetnt_1_1quint">tnt::quint</innernamespace>
    <innernamespace refid="namespacetnt_1_1rpp">tnt::rpp</innernamespace>
    <innernamespace refid="namespacetnt_1_1sine">tnt::sine</innernamespace>
    <innernamespace refid="namespacetnt_1_1tl">tnt::tl</innernamespace>
    <innernamespace refid="namespacetnt_1_1tmx">tnt::tmx</innernamespace>
    <innernamespace refid="namespacetnt_1_1v2">tnt::v2</innernamespace>
    <innernamespace refid="namespacetnt_1_1vfs">tnt::vfs</innernamespace>
    <innernamespace refid="namespacetnt_1_1views">tnt::views</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_actionsv2_8hpp_1a126ed0094bc07c4e4883bcf02c098503" prot="public" static="no">
        <type>decltype([](float, float) {})</type>
        <definition>using tnt::timed_action_fn = typedef decltype([](float, float) {})</definition>
        <argsstring></argsstring>
        <name>timed_action_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" line="105" column="5" bodyfile="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_actionsv2_8hpp_1ae6d9379b2268c5cbe2bfd4f09365e389" prot="public" static="no">
        <type>decltype([](float) {})</type>
        <definition>using tnt::loop_action_fn = typedef decltype([](float) {})</definition>
        <argsstring></argsstring>
        <name>loop_action_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" line="106" column="5" bodyfile="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_listsv2_8hpp_1ad3df880558b584c51a0f024196a7fbc5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; T &gt;</type>
        <definition>using tnt::type_tag = typedef type_list&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>type_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="26" column="5" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_listsv2_8hpp_1ac55f3d1a10ff997135e6324f24120543" prot="public" static="no">
        <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt;&gt;</type>
        <definition>using tnt::empty_list = typedef type_list&lt;&gt;</definition>
        <argsstring></argsstring>
        <name>empty_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="33" column="5" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_fonts_8inl_1a8b8c05a24954bde6d362bf65a00a406f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtnt_1_1asset__cache" kindref="compound">asset_cache</ref>&lt; TTF_Font, I &gt;</type>
        <definition>using tnt::font_cache = typedef asset_cache&lt;TTF_Font, I&gt;</definition>
        <argsstring></argsstring>
        <name>font_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Fonts.inl" line="56" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Fonts.inl" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_fonts_8inl_1a1030f40c549e5dadef0c2786488bd467" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_t_t_f___font_00_01_i_01_4" kindref="compound">font_cache</ref>&lt; 10 &gt;</type>
        <definition>using tnt::small_font_cache = typedef font_cache&lt;10&gt;</definition>
        <argsstring></argsstring>
        <name>small_font_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Fonts.inl" line="58" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Fonts.inl" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_fonts_8inl_1a93a0e9c5d596e2e155e958d59a515c69" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_t_t_f___font_00_01_i_01_4" kindref="compound">font_cache</ref>&lt; 50 &gt;</type>
        <definition>using tnt::medium_font_cache = typedef font_cache&lt;50&gt;</definition>
        <argsstring></argsstring>
        <name>medium_font_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Fonts.inl" line="59" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Fonts.inl" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_fonts_8inl_1a4d4b80d911740170148673a5fd7a587a" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_t_t_f___font_00_01_i_01_4" kindref="compound">font_cache</ref>&lt; 100 &gt;</type>
        <definition>using tnt::large_font_cache = typedef font_cache&lt;100&gt;</definition>
        <argsstring></argsstring>
        <name>large_font_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Fonts.inl" line="60" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Fonts.inl" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_music_8inl_1a6da016e31f01d09c18dcbf68696035d9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtnt_1_1asset__cache" kindref="compound">asset_cache</ref>&lt; Mix_Music, I &gt;</type>
        <definition>using tnt::music_cache = typedef asset_cache&lt;Mix_Music, I&gt;</definition>
        <argsstring></argsstring>
        <name>music_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" line="51" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_music_8inl_1a9b61620278c3921b4ca089b61723157f" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_mix___music_00_01_i_01_4" kindref="compound">music_cache</ref>&lt; 10 &gt;</type>
        <definition>using tnt::small_music_cache = typedef music_cache&lt;10&gt;</definition>
        <argsstring></argsstring>
        <name>small_music_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" line="53" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_music_8inl_1a4bb73fb63561833de8720f7976796f5c" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_mix___music_00_01_i_01_4" kindref="compound">music_cache</ref>&lt; 50 &gt;</type>
        <definition>using tnt::medium_music_cache = typedef music_cache&lt;50&gt;</definition>
        <argsstring></argsstring>
        <name>medium_music_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" line="54" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_music_8inl_1ad5e03d4f9b9b5951117cc80bc567fba6" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_mix___music_00_01_i_01_4" kindref="compound">music_cache</ref>&lt; 100 &gt;</type>
        <definition>using tnt::large_music_cache = typedef music_cache&lt;100&gt;</definition>
        <argsstring></argsstring>
        <name>large_music_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" line="55" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_music_8inl_1a4e2213fb2f06c36917bc25253c3f12ea" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtnt_1_1asset__cache" kindref="compound">asset_cache</ref>&lt; Mix_Chunk, I &gt;</type>
        <definition>using tnt::sfx_cache = typedef asset_cache&lt;Mix_Chunk, I&gt;</definition>
        <argsstring></argsstring>
        <name>sfx_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" line="98" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_music_8inl_1aae61dad4d1810ec65dba385591e98664" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_mix___chunk_00_01_i_01_4" kindref="compound">sfx_cache</ref>&lt; 10 &gt;</type>
        <definition>using tnt::small_sfx_cache = typedef sfx_cache&lt;10&gt;</definition>
        <argsstring></argsstring>
        <name>small_sfx_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" line="100" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_music_8inl_1a432721df21f8e7661ebfc96f3ac939a1" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_mix___chunk_00_01_i_01_4" kindref="compound">sfx_cache</ref>&lt; 50 &gt;</type>
        <definition>using tnt::medium_sfx_cache = typedef sfx_cache&lt;50&gt;</definition>
        <argsstring></argsstring>
        <name>medium_sfx_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" line="101" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_music_8inl_1aaa6c83437ad678b841ab9e65bfe44e81" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_mix___chunk_00_01_i_01_4" kindref="compound">sfx_cache</ref>&lt; 100 &gt;</type>
        <definition>using tnt::large_sfx_cache = typedef sfx_cache&lt;100&gt;</definition>
        <argsstring></argsstring>
        <name>large_sfx_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" line="102" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Music.inl" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_texture_atlases_8inl_1a2b285425891e2aafa9a0782737f9a194" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtnt_1_1asset__cache" kindref="compound">asset_cache</ref>&lt; <ref refid="classtnt_1_1_texture_atlas" kindref="compound">TextureAtlas</ref>, I &gt;</type>
        <definition>using tnt::texture_atlas_cache = typedef asset_cache&lt;TextureAtlas, I&gt;</definition>
        <argsstring></argsstring>
        <name>texture_atlas_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/TextureAtlases.inl" line="42" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/TextureAtlases.inl" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_texture_atlases_8inl_1adb87415497c466e672616b156d48005b" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_texture_atlas_00_01_i_01_4" kindref="compound">texture_atlas_cache</ref>&lt; 10 &gt;</type>
        <definition>using tnt::small_texture_atlas_cache = typedef texture_atlas_cache&lt;10&gt;</definition>
        <argsstring></argsstring>
        <name>small_texture_atlas_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/TextureAtlases.inl" line="44" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/TextureAtlases.inl" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_texture_atlases_8inl_1a0c90a6a4fcd03b08157fc99b8ca15ba3" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_texture_atlas_00_01_i_01_4" kindref="compound">texture_atlas_cache</ref>&lt; 50 &gt;</type>
        <definition>using tnt::medium_texture_atlas_cache = typedef texture_atlas_cache&lt;50&gt;</definition>
        <argsstring></argsstring>
        <name>medium_texture_atlas_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/TextureAtlases.inl" line="45" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/TextureAtlases.inl" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_texture_atlases_8inl_1ac148296857c34eb6f18382282d6e05fc" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_texture_atlas_00_01_i_01_4" kindref="compound">texture_atlas_cache</ref>&lt; 100 &gt;</type>
        <definition>using tnt::large_texture_atlas_cache = typedef texture_atlas_cache&lt;100&gt;</definition>
        <argsstring></argsstring>
        <name>large_texture_atlas_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/TextureAtlases.inl" line="46" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/TextureAtlases.inl" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_textures_8inl_1af52889f7ecef4c8c3d954f3dea4f9661" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtnt_1_1asset__cache" kindref="compound">asset_cache</ref>&lt; SDL_Texture, I &gt;</type>
        <definition>using tnt::texture_cache = typedef asset_cache&lt;SDL_Texture, I&gt;</definition>
        <argsstring></argsstring>
        <name>texture_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Textures.inl" line="56" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Textures.inl" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_textures_8inl_1aeeab17a6351382ec3dd39a2357d33cf1" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_s_d_l___texture_00_01_i_01_4" kindref="compound">texture_cache</ref>&lt; 10 &gt;</type>
        <definition>using tnt::small_texture_cache = typedef texture_cache&lt;10&gt;</definition>
        <argsstring></argsstring>
        <name>small_texture_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Textures.inl" line="58" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Textures.inl" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_textures_8inl_1a9984381984f1fb449e93e724623bde68" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_s_d_l___texture_00_01_i_01_4" kindref="compound">texture_cache</ref>&lt; 50 &gt;</type>
        <definition>using tnt::medium_texture_cache = typedef texture_cache&lt;50&gt;</definition>
        <argsstring></argsstring>
        <name>medium_texture_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Textures.inl" line="59" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Textures.inl" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_textures_8inl_1aa3b8fc794b648d8c099df4f23f405270" prot="public" static="no">
        <type><ref refid="classtnt_1_1asset__cache_3_01_s_d_l___texture_00_01_i_01_4" kindref="compound">texture_cache</ref>&lt; 100 &gt;</type>
        <definition>using tnt::large_texture_cache = typedef texture_cache&lt;100&gt;</definition>
        <argsstring></argsstring>
        <name>large_texture_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/cache/Textures.inl" line="60" column="5" bodyfile="E:/thing/cpp/tnt/include/fileIO/cache/Textures.inl" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_any_8hpp_1a4c180c14a288df32d37befe5f3bc25a0" prot="public" static="no">
        <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt;(std::size_t) -1 &gt;</type>
        <definition>using tnt::any = typedef sized_any&lt;(std::size_t)-1&gt;</definition>
        <argsstring></argsstring>
        <name>any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="324" column="5" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_type_utils_8hpp_1a0ec705db793aceae95a29535e9af1db9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structtnt_1_1template__traits" kindref="compound">template_traits</ref>&lt; T &gt;::template arg_t&lt; I &gt;</type>
        <definition>using tnt::template_arg_t = typedef typename template_traits&lt;T&gt;::template arg_t&lt;I&gt;</definition>
        <argsstring></argsstring>
        <name>template_arg_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/TypeUtils.hpp" line="108" column="5" bodyfile="E:/thing/cpp/tnt/include/types/TypeUtils.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_bench_8hpp_1a386640c653e4e268064bd7a3302f5047" prot="public" static="no">
        <type>std::conditional_t&lt; is_profiling, <ref refid="classtnt_1_1_bench_valid_timer" kindref="compound">BenchValidTimer</ref>, <ref refid="structtnt_1_1_bench_empty_timer" kindref="compound">BenchEmptyTimer</ref> &gt;</type>
        <definition>typedef std::conditional_t&lt; is_profiling, BenchValidTimer, BenchEmptyTimer &gt; tnt::BenchTimer</definition>
        <argsstring></argsstring>
        <name>BenchTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Bench.hpp" line="58" column="5" bodyfile="E:/thing/cpp/tnt/include/utils/Bench.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_actionsv2_8hpp_1af8ebc6b3af904392143ba4b52058e6d5" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::timed_action</definition>
        <argsstring></argsstring>
        <name>timed_action</name>
        <initializer>= std::invocable&lt;T, float, float&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" line="66" column="13" bodyfile="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_actionsv2_8hpp_1af1705e8f4ed5172740e420955ef61569" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::loop_action</definition>
        <argsstring></argsstring>
        <name>loop_action</name>
        <initializer>= std::invocable&lt;T, float&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" line="69" column="13" bodyfile="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_actionsv2_8hpp_1adeff041deaefd0c1ff227b6de986de07" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::block_timed_action</definition>
        <argsstring></argsstring>
        <name>block_timed_action</name>
        <initializer>= timed_action&lt;T&gt; &amp;&amp;
        std::same_as&lt;std::invoke_result_t&lt;T, float, float&gt;, void&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" line="87" column="13" bodyfile="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_actionsv2_8hpp_1a3a03e59c9b13a585a77b4442e655ad4b" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::block_loop_action</definition>
        <argsstring></argsstring>
        <name>block_loop_action</name>
        <initializer>= loop_action&lt;T&gt; &amp;&amp;
        std::same_as&lt;std::invoke_result_t&lt;T, float&gt;, void&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" line="91" column="13" bodyfile="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_actionsv2_8hpp_1a8a6c0a374c372b5cf93e6b64a9b3e8ce" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::blocking_action</definition>
        <argsstring></argsstring>
        <name>blocking_action</name>
        <initializer>= block_timed_action&lt;T&gt; || block_loop_action&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" line="95" column="13" bodyfile="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_actionsv2_8hpp_1a2cf3341c7ecf4fc8aaf250b0e67ef2c9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::action</definition>
        <argsstring></argsstring>
        <name>action</name>
        <initializer>= blocking_action&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" line="102" column="13" bodyfile="E:/thing/cpp/tnt/include/exp/Actionsv2.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_type_listsv2_8hpp_1a6e84809025b18ad4a443c9a4bfaaebc9" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        <definition>constexpr type_list&lt;Ts...&gt; tnt::make_list</definition>
        <argsstring></argsstring>
        <name>make_list</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="23" column="32" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_type_listsv2_8hpp_1a814249f90f7a7e7b794227a654487f40" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_tag</ref>&lt; T &gt;</type>
        <definition>constexpr type_tag&lt;T&gt; tnt::make_tag</definition>
        <argsstring></argsstring>
        <name>make_tag</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="31" column="31" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_type_listsv2_8hpp_1af9073b56367bf0f4977c18f04c659ebf" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; typename</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1value__wrapper__fn" kindref="compound">value_wrapper_fn</ref>&lt; P &gt;</type>
        <definition>constexpr value_wrapper_fn&lt;P&gt; tnt::value_fn</definition>
        <argsstring></argsstring>
        <name>value_fn</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="46" column="39" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_type_listsv2_8hpp_1a10bf7bf5fd5da16c3aff4821a42447c5" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; typename</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1bind__value__wrapper__fn" kindref="compound">bind_value_wrapper_fn</ref>&lt; P, Ts... &gt;</type>
        <definition>constexpr bind_value_wrapper_fn&lt;P, Ts...&gt; tnt::bind_value_fn</definition>
        <argsstring></argsstring>
        <name>bind_value_fn</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="59" column="44" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_type_listsv2_8hpp_1a7bd4ffe3cfe3c394e6beaf5c6f6c4325" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; typename</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__wrapper__fn" kindref="compound">type_wrapper_fn</ref>&lt; P &gt;</type>
        <definition>constexpr type_wrapper_fn&lt;P&gt; tnt::type_fn</definition>
        <argsstring></argsstring>
        <name>type_fn</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="72" column="38" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_type_listsv2_8hpp_1aef933c2692f03b18262b14288c829fe4" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; typename</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1bind__type__wrapper__fn" kindref="compound">bind_type_wrapper_fn</ref>&lt; P, Ts... &gt;</type>
        <definition>constexpr bind_type_wrapper_fn&lt;P, Ts...&gt; tnt::bind_type_fn</definition>
        <argsstring></argsstring>
        <name>bind_type_fn</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="85" column="43" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_easings_8hpp_1a5f33736a8ac0d75096bb3f77ba7a8854" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float tnt::PennerNumber</definition>
        <argsstring></argsstring>
        <name>PennerNumber</name>
        <initializer>{1.70158f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Easings.hpp" line="12" column="28" bodyfile="E:/thing/cpp/tnt/include/math/Easings.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1adfb8e8cdc2d3dc5a25f663627c520552" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float tnt::PI</definition>
        <argsstring></argsstring>
        <name>PI</name>
        <initializer>{3.1415926f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="187" column="28" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1ac4c9d759f02e46568ff35e1a4841a79b" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::RadianToDegree</definition>
        <argsstring></argsstring>
        <name>RadianToDegree</name>
        <initializer>= [](float rad) -&gt; float {
        return (rad * (180.0f / PI));
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="189" column="27" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1a0a00b5ef969e1afcaccf2417baaf6613" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::DegreeToRadian</definition>
        <argsstring></argsstring>
        <name>DegreeToRadian</name>
        <initializer>= [](float deg) -&gt; float {
        return (deg * (PI / 180.0f));
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="192" column="27" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1a5cd2d8a5d449ae9dc90fbe0e9a5a0bf7" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tnt::clamp</definition>
        <argsstring></argsstring>
        <name>clamp</name>
        <initializer>= [](T val, T min, T max) {
        if (val &lt; min)
            val = min;
        if (val &gt; max)
            val = max;
        return val;
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="197" column="17" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1ac8466bd20cfbcc7063bdc6794cf9dd22" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::lerp</definition>
        <argsstring></argsstring>
        <name>lerp</name>
        <initializer>= [](T a, T b, float pct)
        -&gt; decltype(a + (b - a) * pct) {
        return a + (b - a) * pct;
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="206" column="27" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1a1d4e618ba7f314a1f67efb132d5216c4" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::blerp</definition>
        <argsstring></argsstring>
        <name>blerp</name>
        <initializer>=
        [](T a1, T a2, T b1, T b2,
           float pct1, float pct2) {
            return (a1 * (1 - pct1) * (1 - pct2) + a2 * pct1 * (1 - pct2) +
                    b1 * pct2 * (1 - pct1) + b2 * pct1 * pct2);
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="226" column="27" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1ae45159ed9f18a55852638538bb65af33" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::bezier_curve</definition>
        <argsstring></argsstring>
        <name>bezier_curve</name>
        <initializer>= [](T p1, T p2,
                                            T p3, T p4, float pct) {
        return ((p1 * (1 - pct) * (1 - pct) * (1 - pct)) +
                (p2 * 3 * (1 - pct) * (1 - pct) * pct) +
                (p3 * 3 * (1 - pct) * pct * pct) + (p4 * pct * pct * pct));
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="234" column="27" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1a1892192ed68914008bb12dd5e9bb2491" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::step</definition>
        <argsstring></argsstring>
        <name>step</name>
        <initializer>= [](T a, T b) -&gt; float {
        return static_cast&lt;float&gt;(a &lt;= b);
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="242" column="27" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1a28717389545f68ee707de351dec063cb" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::boxstep</definition>
        <argsstring></argsstring>
        <name>boxstep</name>
        <initializer>= [](T a, T b, T x) -&gt; float {
        return clamp&lt;decltype(x - a / b - a)&gt;(x - a / b - a, 0, 1);
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="247" column="27" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1ab44561b53e6fb0a9678011be365017bf" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::pulse</definition>
        <argsstring></argsstring>
        <name>pulse</name>
        <initializer>= [](T a, T b, T x) -&gt; float {
        return step&lt;T&gt;(a, x) - step&lt;T&gt;(b, x);
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="252" column="27" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1aa12799b9952cb797c0c97e1e7a3afc6b" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto tnt::smoothstep</definition>
        <argsstring></argsstring>
        <name>smoothstep</name>
        <initializer>= [](float a, float b, float x) -&gt; float {
        if (x &lt; a)
            return 0;
        else if (x &gt;= b)
            return 1;
        x = boxstep&lt;float&gt;(a, b, x);
        return (x * x * (3 - x - x));
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="256" column="17" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1a0400e991daa3a08828853a69387109ab" prot="public" static="no" mutable="no">
        <type>const auto</type>
        <definition>const auto tnt::gamacorrect</definition>
        <argsstring></argsstring>
        <name>gamacorrect</name>
        <initializer>= [](float gamma, float x) -&gt; float {
        return std::powf(x, 1 / gamma);
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="266" column="23" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1a9ba902cde5f212a078aef0d5c6889d66" prot="public" static="no" mutable="no">
        <type>const auto</type>
        <definition>const auto tnt::bias</definition>
        <argsstring></argsstring>
        <name>bias</name>
        <initializer>= [](float b, float x) -&gt; float {
        return std::powf(x, std::logf(b) / std::logf(0.5));
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="270" column="23" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1acf0f3072e7a0a12d7146f2e54fea1d27" prot="public" static="no" mutable="no">
        <type>const auto</type>
        <definition>const auto tnt::gain</definition>
        <argsstring></argsstring>
        <name>gain</name>
        <initializer>= [](float g, float x) -&gt; float {
        if (x &lt; 0.5)
            return bias(1 - g, x + x) / 2;
        return 1 - bias(1 - g, 2 - x - x) / 2;
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="274" column="23" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1afaf3c77ab002106c083082700d44056a" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::Q_rsqrt</definition>
        <argsstring></argsstring>
        <name>Q_rsqrt</name>
        <initializer>= [](float number) -&gt; float {
        constexpr float threehalfs = 1.5F;

        float const &amp;x2{number * 0.5F};
        float y{number};
        long i{*(long *)&amp;y}; 
        i = 0x5f3759df - (i &gt;&gt; 1);
        y = *(float *)&amp;i;
        y = y * (threehalfs - (x2 * y * y));

        return y;
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="282" column="27" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_math_utils_8hpp_1af2e05577e9e3af7b712ea1d98fb0223d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::Q_sqrt</definition>
        <argsstring></argsstring>
        <name>Q_sqrt</name>
        <initializer>= [](float number) -&gt; float {
        constexpr float threehalfs = 1.5F;

        float const &amp;x2{number * 0.5F};
        float y{number};
        long i{*(long *)&amp;y}; 
        i = 0x5f3759df - (i &gt;&gt; 1);
        y = *(float *)&amp;i;
        y = y * (threehalfs - (x2 * y * y));

        return number * y;
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="295" column="27" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_vector_8hpp_1a7c4910cdb44daa2c98834800d69e1817" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>constexpr Vector tnt::VECTOR_ZERO</definition>
        <argsstring></argsstring>
        <name>VECTOR_ZERO</name>
        <initializer>{0.f, 0.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="237" column="29" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_vector_8hpp_1a0216c5b24f8adc45ddd3ea0cded12b3d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>constexpr Vector tnt::VECTOR_ONE</definition>
        <argsstring></argsstring>
        <name>VECTOR_ONE</name>
        <initializer>{1.f, 1.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="238" column="29" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_vector_8hpp_1a771e0290026ee9af1d254f13bc231f79" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>constexpr Vector tnt::VECTOR_UP</definition>
        <argsstring></argsstring>
        <name>VECTOR_UP</name>
        <initializer>{0.f, -1.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="239" column="29" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_vector_8hpp_1aca19f59c7d8b32b968859b8b8bb9641f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>constexpr Vector tnt::VECTOR_RIGHT</definition>
        <argsstring></argsstring>
        <name>VECTOR_RIGHT</name>
        <initializer>{1.f, 0.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="240" column="29" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_vector_8hpp_1af38b1e2717ca8862503917ebd76816a6" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>constexpr Vector tnt::VECTOR_DOWN</definition>
        <argsstring></argsstring>
        <name>VECTOR_DOWN</name>
        <initializer>{0.f, 1.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="241" column="29" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_vector_8hpp_1ab9adddf32a5778b7a146044f5bcb6fa1" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>constexpr Vector tnt::VECTOR_LEFT</definition>
        <argsstring></argsstring>
        <name>VECTOR_LEFT</name>
        <initializer>{-1.f, 0.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="242" column="29" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_any_8hpp_1a0cb00fc2e8bd2dcb0c4e1a410f21e856" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1in__place__tag__t" kindref="compound">in_place_tag_t</ref>&lt; T &gt;</type>
        <definition>constexpr in_place_tag_t&lt;T&gt; tnt::in_place_t</definition>
        <argsstring></argsstring>
        <name>in_place_t</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="32" column="37" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_any_8hpp_1ae8cd120195c8ab332534ed6b72a9dcdf" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1size__tag__t" kindref="compound">size_tag_t</ref>&lt; S &gt;</type>
        <definition>constexpr size_tag_t&lt;S&gt; tnt::size_tag</definition>
        <argsstring></argsstring>
        <name>size_tag</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="41" column="33" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_any_8hpp_1a3c680336666f0769b3e8cc38972c2672" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structtnt_1_1size__tag__t" kindref="compound">size_tag_t</ref>&lt;(std::size_t) -1 &gt;</type>
        <definition>constexpr size_tag_t&lt;(std::size_t)-1&gt; tnt::deduce_size</definition>
        <argsstring></argsstring>
        <name>deduce_size</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="43" column="33" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_sparse_set_8hpp_1a8215d745d2776b148d53ad682a308281" prot="public" static="no" mutable="no">
        <type>constexpr struct <ref refid="structtnt_1_1as__sentinel__t" kindref="compound">tnt::as_sentinel_t</ref></type>
        <definition>constexpr struct tnt::as_sentinel_t tnt::as_sentinel</definition>
        <argsstring></argsstring>
        <name>as_sentinel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/SparseSet.hpp" line="24" column="17"/>
      </memberdef>
      <memberdef kind="variable" id="_type_utils_8hpp_1a237a615385aa4b1c4fedf24764525eea" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::if_then</definition>
        <argsstring></argsstring>
        <name>if_then</name>
        <initializer>= [](bool cond, auto const &amp;ret) {
        return (ret * cond);
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/TypeUtils.hpp" line="44" column="27" bodyfile="E:/thing/cpp/tnt/include/types/TypeUtils.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_type_utils_8hpp_1a17e37637f0ba45d16bb232f5ae21c608" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::if_else</definition>
        <argsstring></argsstring>
        <name>if_else</name>
        <initializer>= [](bool cond, auto const &amp;r1, auto const &amp;r2) {
        static_assert(std::is_same_v&lt;decltype(r1), decltype(r2)&gt; ||
                          std::is_convertible_v&lt;decltype(r1), decltype(r2)&gt; ||
                          std::is_convertible_v&lt;decltype(r2), decltype(r1)&gt;,
                      &quot;Parameters passed to if_else cannot be converted to each-other&apos;s type!!&quot;);
        return (r1 * cond + r2 * (!cond));
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/TypeUtils.hpp" line="48" column="27" bodyfile="E:/thing/cpp/tnt/include/types/TypeUtils.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_assert_8hpp_1adec5e8d916d63661f79337db58e33f8d" prot="public" static="no" mutable="no">
        <type><ref refid="structtnt_1_1overload" kindref="compound">overload</ref></type>
        <definition>overload tnt::ensure</definition>
        <argsstring></argsstring>
        <name>ensure</name>
        <initializer>{
        [](bool cond) {
            if (!cond)
                throw <ref refid="structtnt_1_1failed__ensure" kindref="compound">failed_ensure</ref>{&quot;&quot;};
        },
        [](bool cond, char const *message) {
            if (!cond)
                throw <ref refid="structtnt_1_1failed__ensure" kindref="compound">failed_ensure</ref>{message};
        }}</initializer>
        <briefdescription>
<para>Utility struct used for checking preconditions and/or postconditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Assert.hpp" line="29" column="21" bodyfile="E:/thing/cpp/tnt/include/utils/Assert.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_assert_8hpp_1a875549eba564947e1c0302f792d0a502" prot="public" static="no" mutable="no">
        <type><ref refid="structtnt_1_1overload" kindref="compound">overload</ref></type>
        <definition>overload tnt::safe_ensure</definition>
        <argsstring></argsstring>
        <name>safe_ensure</name>
        <initializer>{
        [](bool cond) noexcept {
            if (!cond)
                std::terminate();
        },
        [](bool cond, char const *message) noexcept {
            if (!cond)
                logger::error(message);
        }}</initializer>
        <briefdescription>
<para>A version of ensure_t that calls std::terminate on false predication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Assert.hpp" line="40" column="21" bodyfile="E:/thing/cpp/tnt/include/utils/Assert.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_assert_8hpp_1a9cd0f7c08f6c4599c448e5b385596ac5" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto tnt::check</definition>
        <argsstring></argsstring>
        <name>check</name>
        <initializer>{[](bool cond, char const *message) noexcept {
        if (!cond)
            logger::warning(&quot;Predication failed!! {}&quot;, message);
    }}</initializer>
        <briefdescription>
<para>A version of ensure_t that just prints a warning on false predicate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Assert.hpp" line="51" column="17" bodyfile="E:/thing/cpp/tnt/include/utils/Assert.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_bench_8hpp_1a7a1616074aa314326dbb3b25931d14bb" prot="public" static="no" mutable="no">
        <type>constexpr struct TNT_API <ref refid="structtnt_1_1start__batch__tag" kindref="compound">tnt::start_batch_tag</ref></type>
        <definition>constexpr struct TNT_API tnt::start_batch_tag tnt::start_batch</definition>
        <argsstring></argsstring>
        <name>start_batch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Bench.hpp" line="22" column="17"/>
      </memberdef>
      <memberdef kind="variable" id="_bench_8hpp_1abed123f89b4a2b63144442decee09d0c" prot="public" static="no" mutable="no">
        <type>constexpr struct TNT_API <ref refid="structtnt_1_1end__batch__tag" kindref="compound">tnt::end_batch_tag</ref></type>
        <definition>constexpr struct TNT_API tnt::end_batch_tag tnt::end_batch</definition>
        <argsstring></argsstring>
        <name>end_batch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Bench.hpp" line="27" column="15"/>
      </memberdef>
      <memberdef kind="variable" id="_bench_8hpp_1a0f16f63f3cb5cfd4205b1da98ae69c2f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_profiling</definition>
        <argsstring></argsstring>
        <name>is_profiling</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Bench.hpp" line="32" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Bench.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_bit_flags_8hpp_1abf01af12d1b8c548bae4c7f3d1a75b0c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::enum_type</definition>
        <argsstring></argsstring>
        <name>enum_type</name>
        <initializer>= std::is_enum_v&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="12" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_bit_flags_8hpp_1afb54c2005de5a83648bb921699acb219" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::bit_mask</definition>
        <argsstring></argsstring>
        <name>bit_mask</name>
        <initializer>= enum_type&lt;T&gt; &amp;&amp; (<ref refid="structtnt_1_1enable__bit__mask" kindref="compound">enable_bit_mask</ref>&lt;T&gt;::value == true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="20" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_convert_8hpp_1aa5305c307b49a8d6d4f9ff9e800480e6" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::convert::FloatToInt</definition>
        <argsstring></argsstring>
        <name>FloatToInt</name>
        <initializer>= [](float f) {
            return (*((int *)&amp;(f)));
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Convert.hpp" line="8" column="31" bodyfile="E:/thing/cpp/tnt/include/utils/Convert.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_convert_8hpp_1aea6d19601a80ce7dc49f46da96f8c464" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::convert::FloatToUInt</definition>
        <argsstring></argsstring>
        <name>FloatToUInt</name>
        <initializer>= [](float f) {
            return (*((unsigned int *)&amp;(f)));
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Convert.hpp" line="11" column="31" bodyfile="E:/thing/cpp/tnt/include/utils/Convert.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_convert_8hpp_1afed2b1ddb1eaa5baffb6ec65d64f3a93" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::LessThan0</definition>
        <argsstring></argsstring>
        <name>LessThan0</name>
        <initializer>= [](float f) {
        return (convert::FloatToUInt(f) &gt; 0x800000000U);
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Convert.hpp" line="16" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Convert.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_convert_8hpp_1ad78aed8029fff1b4cbb550663fd119d5" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::LessOrEqZero</definition>
        <argsstring></argsstring>
        <name>LessOrEqZero</name>
        <initializer>= [](float f) {
        return (convert::FloatToInt(f) &lt;= 0);
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Convert.hpp" line="20" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Convert.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_convert_8hpp_1a1f5313632fe483ef0336b829067e7104" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::EqualToZero</definition>
        <argsstring></argsstring>
        <name>EqualToZero</name>
        <initializer>= [](float f) {
        return ((convert::FloatToInt(f) &lt;&lt; 1) == 0);
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Convert.hpp" line="24" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Convert.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_convert_8hpp_1ad6532b73a659622d6050500238505d77" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::GreaterOrEq0</definition>
        <argsstring></argsstring>
        <name>GreaterOrEq0</name>
        <initializer>= [](float f) {
        return (convert::FloatToUInt(f) &lt;= 0x800000000U);
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Convert.hpp" line="28" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Convert.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_convert_8hpp_1ad95c8efb11728cde07d75e3354fd5666" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::GreaterThan0</definition>
        <argsstring></argsstring>
        <name>GreaterThan0</name>
        <initializer>= [](float f) {
        return (convert::FloatToInt(f) &gt; 0);
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Convert.hpp" line="32" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Convert.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a7d63c6209ed4aee96ea3974f6acf6654" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; class</type>
            <declname>Expression</declname>
            <defname>Expression</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_detected_v</definition>
        <argsstring></argsstring>
        <name>is_detected_v</name>
        <initializer>= <ref refid="structtnt_1_1is__detected" kindref="compound">is_detected</ref>&lt;Expression, void, Ts...&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="47" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1ab592c14f7b81757c6a64d014c3c7e7bc" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::os</definition>
        <argsstring></argsstring>
        <name>os</name>
        <initializer>= detail::is_any_of_v&lt;T, <ref refid="structtnt_1_1windows__t" kindref="compound">windows_t</ref>, <ref refid="structtnt_1_1linux__t" kindref="compound">linux_t</ref>, <ref refid="structtnt_1_1macos__t" kindref="compound">macos_t</ref>, <ref refid="structtnt_1_1ios__t" kindref="compound">ios_t</ref>, <ref refid="structtnt_1_1android__t" kindref="compound">android_t</ref>, <ref refid="structtnt_1_1unix__t" kindref="compound">unix_t</ref>&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="88" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a5f810307f755eccb13574d8d1b93e5a0" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>os</type>
            <declname>O</declname>
            <defname>O</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_os_v</definition>
        <argsstring></argsstring>
        <name>is_os_v</name>
        <initializer>{<ref refid="structtnt_1_1is__os" kindref="compound">is_os</ref>&lt;O&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="154" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a8c78b6761d3c2d881facae94378a0343" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_windows_v</definition>
        <argsstring></argsstring>
        <name>is_windows_v</name>
        <initializer>{<ref refid="structtnt_1_1is__os" kindref="compound">is_os</ref>&lt;<ref refid="structtnt_1_1windows__t" kindref="compound">windows_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="156" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a9332f25ad349b345a742b91996dee0a3" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_linux_v</definition>
        <argsstring></argsstring>
        <name>is_linux_v</name>
        <initializer>{<ref refid="structtnt_1_1is__os" kindref="compound">is_os</ref>&lt;<ref refid="structtnt_1_1linux__t" kindref="compound">linux_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="157" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a68d23c30b8ae5d037453f0d5e1052e53" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_macos_v</definition>
        <argsstring></argsstring>
        <name>is_macos_v</name>
        <initializer>{<ref refid="structtnt_1_1is__os" kindref="compound">is_os</ref>&lt;<ref refid="structtnt_1_1macos__t" kindref="compound">macos_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="158" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a4977bed466395e933599f9c10b465ed6" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_ios_v</definition>
        <argsstring></argsstring>
        <name>is_ios_v</name>
        <initializer>{<ref refid="structtnt_1_1is__os" kindref="compound">is_os</ref>&lt;<ref refid="structtnt_1_1ios__t" kindref="compound">ios_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="159" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a77cabb225b7f25188ccdf0ad0922d0f3" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_android_v</definition>
        <argsstring></argsstring>
        <name>is_android_v</name>
        <initializer>{<ref refid="structtnt_1_1is__os" kindref="compound">is_os</ref>&lt;<ref refid="structtnt_1_1android__t" kindref="compound">android_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="160" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a18879387d4a3166ecbb212bf23765d47" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_unix_v</definition>
        <argsstring></argsstring>
        <name>is_unix_v</name>
        <initializer>{<ref refid="structtnt_1_1is__os" kindref="compound">is_os</ref>&lt;<ref refid="structtnt_1_1unix__t" kindref="compound">unix_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="161" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a6f0c94ef815be36ac266aba8c628f153" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::compiler</definition>
        <argsstring></argsstring>
        <name>compiler</name>
        <initializer>= detail::is_any_of_v&lt;T, <ref refid="structtnt_1_1gcc__t" kindref="compound">gcc_t</ref>, <ref refid="structtnt_1_1clang__t" kindref="compound">clang_t</ref>, <ref refid="structtnt_1_1msvc__t" kindref="compound">msvc_t</ref>&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="178" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a8b0e8eaead7abb4a79cbe53459e482c9" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>compiler</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_compiler_v</definition>
        <argsstring></argsstring>
        <name>is_compiler_v</name>
        <initializer>{<ref refid="structtnt_1_1is__compiler" kindref="compound">is_compiler</ref>&lt;C&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="214" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a78b426e0059238498031bca44732c3da" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_gcc_v</definition>
        <argsstring></argsstring>
        <name>is_gcc_v</name>
        <initializer>{<ref refid="structtnt_1_1is__compiler" kindref="compound">is_compiler</ref>&lt;<ref refid="structtnt_1_1gcc__t" kindref="compound">gcc_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="216" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a2fff0a8d06a1b9dd12315a6da988a66a" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_clang_v</definition>
        <argsstring></argsstring>
        <name>is_clang_v</name>
        <initializer>{<ref refid="structtnt_1_1is__compiler" kindref="compound">is_compiler</ref>&lt;<ref refid="structtnt_1_1clang__t" kindref="compound">clang_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="217" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a55568479addb15164d4d0eb95834a523" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_msvc_v</definition>
        <argsstring></argsstring>
        <name>is_msvc_v</name>
        <initializer>{<ref refid="structtnt_1_1is__compiler" kindref="compound">is_compiler</ref>&lt;<ref refid="structtnt_1_1msvc__t" kindref="compound">msvc_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="218" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a876f42e633bcf5d7246240e70ca24c59" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept tnt::simd_instruction</definition>
        <argsstring></argsstring>
        <name>simd_instruction</name>
        <initializer>=
        detail::is_any_of_v&lt;T, <ref refid="structtnt_1_1x86sse__t" kindref="compound">x86sse_t</ref>, <ref refid="structtnt_1_1x86sse2__t" kindref="compound">x86sse2_t</ref>,
                            <ref refid="structtnt_1_1sse__t" kindref="compound">sse_t</ref>, <ref refid="structtnt_1_1sse2__t" kindref="compound">sse2_t</ref>, <ref refid="structtnt_1_1sse3__t" kindref="compound">sse3_t</ref>,
                            <ref refid="structtnt_1_1ssse3__t" kindref="compound">ssse3_t</ref>, <ref refid="structtnt_1_1sse4__1__t" kindref="compound">sse4_1_t</ref>, <ref refid="structtnt_1_1sse4__2__t" kindref="compound">sse4_2_t</ref>,
                            <ref refid="structtnt_1_1avx__t" kindref="compound">avx_t</ref>, <ref refid="structtnt_1_1avx2__t" kindref="compound">avx2_t</ref>&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="263" column="13" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a56fb1ec10a7d2058feeb9987c9e71371" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>simd_instruction</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_simd_v</definition>
        <argsstring></argsstring>
        <name>is_simd_v</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;S&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="373" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a0a6d0611d8baf3393431e8927356a035" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_x86_sse_t</definition>
        <argsstring></argsstring>
        <name>is_x86_sse_t</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;<ref refid="structtnt_1_1x86sse__t" kindref="compound">x86sse_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="375" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a16a1195b0fe75ecfd702246eb2df64cd" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_x86_sse2_t</definition>
        <argsstring></argsstring>
        <name>is_x86_sse2_t</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;<ref refid="structtnt_1_1x86sse2__t" kindref="compound">x86sse2_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="376" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a4a327e25601b2f0226fdb9285aad69e8" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_sse_t</definition>
        <argsstring></argsstring>
        <name>is_sse_t</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;<ref refid="structtnt_1_1sse__t" kindref="compound">sse_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="377" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1ac79f0249793e05b0881efd0f35c97750" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_sse2_t</definition>
        <argsstring></argsstring>
        <name>is_sse2_t</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;<ref refid="structtnt_1_1sse2__t" kindref="compound">sse2_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="378" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a217436b299aa2e8743fec0a3e6e5cbab" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_sse3_t</definition>
        <argsstring></argsstring>
        <name>is_sse3_t</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;<ref refid="structtnt_1_1sse3__t" kindref="compound">sse3_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="379" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1ad64a5b327b89451c89270ebaa7ecbfaf" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_ssse3_t</definition>
        <argsstring></argsstring>
        <name>is_ssse3_t</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;<ref refid="structtnt_1_1ssse3__t" kindref="compound">ssse3_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="380" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1ad010ce9e293deb7daf43934b19623be9" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_sse4_1_t</definition>
        <argsstring></argsstring>
        <name>is_sse4_1_t</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;<ref refid="structtnt_1_1sse4__1__t" kindref="compound">sse4_1_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="381" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a354133433a67e5e05130ce313f166741" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_sse4_2_t</definition>
        <argsstring></argsstring>
        <name>is_sse4_2_t</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;<ref refid="structtnt_1_1sse4__2__t" kindref="compound">sse4_2_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="382" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1a8ec9c5e76415f87df3f367eeefe2c7d2" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_avx_t</definition>
        <argsstring></argsstring>
        <name>is_avx_t</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;<ref refid="structtnt_1_1avx__t" kindref="compound">avx_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="383" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_traits_8hpp_1aaa8ad1bf09f52f0346ade068abf50168" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::is_avx2_t</definition>
        <argsstring></argsstring>
        <name>is_avx2_t</name>
        <initializer>{<ref refid="structtnt_1_1is__simd" kindref="compound">is_simd</ref>&lt;<ref refid="structtnt_1_1avx2__t" kindref="compound">avx2_t</ref>&gt;::value}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Traits.hpp" line="384" column="27" bodyfile="E:/thing/cpp/tnt/include/utils/Traits.hpp" bodystart="384" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_co_utils_8hpp_1a2c5c767bf20a81fa4b272b8bea704d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::incrementable</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>requires std::equality_comparable_with&lt; T, U &gt; <ref refid="classtnt_1_1generator" kindref="compound">tnt::generator</ref>&lt; T &gt;</type>
        <definition>requires std::equality_comparable_with&lt;T, U&gt; tnt::generator&lt;T&gt; tnt::range</definition>
        <argsstring>(T min_, U max_, decltype(std::declval&lt; U &gt;() - std::declval&lt; T &gt;()) step=decltype(std::declval&lt; U &gt;() - std::declval&lt; T &gt;()){1})</argsstring>
        <name>range</name>
        <param>
          <type>T</type>
          <declname>min_</declname>
        </param>
        <param>
          <type>U</type>
          <declname>max_</declname>
        </param>
        <param>
          <type>decltype(std::declval&lt; U &gt;() - std::declval&lt; T &gt;())</type>
          <declname>step</declname>
          <defval>decltype(std::declval&lt; U &gt;() - std::declval&lt; T &gt;()){1}</defval>
        </param>
        <briefdescription>
<para>co_yield all the elements within the range [min_, max_) while walking with a certain step on python style. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of min_. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of max_. Same as T by default. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_</parametername>
</parameternamelist>
<parameterdescription>
<para>The first element to co_yield. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_</parametername>
</parameternamelist>
<parameterdescription>
<para>The element one past the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>The number that will be added to min_ each call. Defaults to 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/CoUtils.hpp" line="18" column="21" bodyfile="E:/thing/cpp/tnt/include/async/CoUtils.hpp" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="_graphics_8hpp_1a0fc9c593e3b4b42b9544cdf75e448bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TNT_API void</type>
        <definition>TNT_API void tnt::drawLine</definition>
        <argsstring>(Window const &amp;win, Vector const &amp;start, Vector const &amp;finish, SDL_Color const color=SDL_Color{255, 255, 255}, unsigned const thickness=1)</argsstring>
        <name>drawLine</name>
        <param>
          <type><ref refid="classtnt_1_1_window" kindref="compound">Window</ref> const &amp;</type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>finish</declname>
        </param>
        <param>
          <type>SDL_Color const</type>
          <declname>color</declname>
          <defval>SDL_Color{255, 255, 255}</defval>
        </param>
        <param>
          <type>unsigned const</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Draw a line on the given window with the specified <emphasis>color</emphasis> from <emphasis>start</emphasis> to <emphasis>finish</emphasis> that is <emphasis>thickness</emphasis> pixels thick. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>win</parametername>
</parameternamelist>
<parameterdescription>
<para>The window where the line will be drawed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting point of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finish</parametername>
</parameternamelist>
<parameterdescription>
<para>The other tip of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color that will be used to draw the line. Default to white. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thickness</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter specifying how thick the line will be. Default to 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Graphics.hpp" line="19" column="18" declfile="E:/thing/cpp/tnt/include/core/Graphics.hpp" declline="19" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_graphics_8hpp_1a23de913e92f50d9ce4db7b14016977d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TNT_API void</type>
        <definition>TNT_API void tnt::drawHorizontalLine</definition>
        <argsstring>(Window const &amp;win, float const x1, float const x2, float const y, SDL_Color const color=SDL_Color{255, 255, 255}, unsigned const thickness=1)</argsstring>
        <name>drawHorizontalLine</name>
        <param>
          <type><ref refid="classtnt_1_1_window" kindref="compound">Window</ref> const &amp;</type>
          <declname>win</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>y</declname>
        </param>
        <param>
          <type>SDL_Color const</type>
          <declname>color</declname>
          <defval>SDL_Color{255, 255, 255}</defval>
        </param>
        <param>
          <type>unsigned const</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Draw a horizontal line on the given window with the specified <emphasis>color</emphasis> from ( <emphasis>x1</emphasis>, <emphasis>y</emphasis>) to ( <emphasis>x2</emphasis>, <emphasis>y</emphasis>) that is <emphasis>thickness</emphasis> pixels thick. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>win</parametername>
</parameternamelist>
<parameterdescription>
<para>The window where the line will be drawed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting x position of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>The x position of the other tip of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y position of each point on the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color that will be used to draw the line. Default to white. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thickness</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter specifying how thick the line will be. Default to 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Graphics.hpp" line="29" column="18" declfile="E:/thing/cpp/tnt/include/core/Graphics.hpp" declline="29" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_graphics_8hpp_1a4ab6c1c4e8ed1e5fbffae17119056226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TNT_API void</type>
        <definition>TNT_API void tnt::drawVerticalLine</definition>
        <argsstring>(Window const &amp;win, float const x, float const y1, float const y2, SDL_Color const color=SDL_Color{255, 255, 255}, unsigned const thickness=1)</argsstring>
        <name>drawVerticalLine</name>
        <param>
          <type><ref refid="classtnt_1_1_window" kindref="compound">Window</ref> const &amp;</type>
          <declname>win</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>SDL_Color const</type>
          <declname>color</declname>
          <defval>SDL_Color{255, 255, 255}</defval>
        </param>
        <param>
          <type>unsigned const</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Draw a vertical line on the given window with the specified <emphasis>color</emphasis> from ( <emphasis>x</emphasis>, <emphasis>y1</emphasis>) to ( <emphasis>x</emphasis>, <emphasis>y2</emphasis>) that is <emphasis>thickness</emphasis> pixels thick. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>win</parametername>
</parameternamelist>
<parameterdescription>
<para>The window where the line will be drawed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x position of each point on the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting y position of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y2</parametername>
</parameternamelist>
<parameterdescription>
<para>The y position of the other tip of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color that will be used to draw the line. Default to white. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thickness</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter specifying how thick the line will be. Default to 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Graphics.hpp" line="39" column="18" declfile="E:/thing/cpp/tnt/include/core/Graphics.hpp" declline="39" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_graphics_8hpp_1adaaee2a55e83fa766e74361b49f51352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TNT_API void</type>
        <definition>TNT_API void tnt::drawLines</definition>
        <argsstring>(Window const &amp;win, std::span&lt; tnt::Vector &gt; points, SDL_Color const color=SDL_Color{255, 255, 255})</argsstring>
        <name>drawLines</name>
        <param>
          <type><ref refid="classtnt_1_1_window" kindref="compound">Window</ref> const &amp;</type>
          <declname>win</declname>
        </param>
        <param>
          <type>std::span&lt; <ref refid="structtnt_1_1_vector" kindref="compound">tnt::Vector</ref> &gt;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>SDL_Color const</type>
          <declname>color</declname>
          <defval>SDL_Color{255, 255, 255}</defval>
        </param>
        <briefdescription>
<para>Draw lines defined by <emphasis>points</emphasis> with the given <emphasis>color</emphasis> on <emphasis>win</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>win</parametername>
</parameternamelist>
<parameterdescription>
<para>The window where the lines will be drawed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>The points that define the lines borders. points.size() should be even. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color that will be used to draw the lines. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Graphics.hpp" line="46" column="18" declfile="E:/thing/cpp/tnt/include/core/Graphics.hpp" declline="46" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1ab646b6628db25a71038ebc21337691af" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::operator==</definition>
        <argsstring>(tnt::type_list&lt; Ts... &gt;, tnt::type_list&lt; Us... &gt;) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">tnt::type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">tnt::type_list</ref>&lt; Us... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="89" column="20" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="89" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a2e46b42abe74b2f6e6426070a7b2ea35" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts..., Us... &gt;</type>
        <definition>constexpr type_list&lt;Ts..., Us...&gt; tnt::operator|</definition>
        <argsstring>(tnt::type_list&lt; Ts... &gt;, tnt::type_list&lt; Us... &gt;) noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">tnt::type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">tnt::type_list</ref>&lt; Us... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="98" column="25" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="_asset_cache_8hpp_1af2015aa1205e35588205e40d694c00a3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtnt_1_1asset__cache_3_01_t_t_f___font_00_01_i_01_4" kindref="compound">small_font_cache</ref> *</type>
        <definition>small_font_cache* tnt::default_font_cache</definition>
        <argsstring>() noexcept</argsstring>
        <name>default_font_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/AssetCache.hpp" line="26" column="29" bodyfile="E:/thing/cpp/tnt/include/fileIO/AssetCache.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="_asset_cache_8hpp_1a2d5a1ed2c0bda603df9dfc6c860f8dd8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtnt_1_1asset__cache_3_01_mix___music_00_01_i_01_4" kindref="compound">small_music_cache</ref> *</type>
        <definition>small_music_cache* tnt::default_music_cache</definition>
        <argsstring>() noexcept</argsstring>
        <name>default_music_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/AssetCache.hpp" line="27" column="30" bodyfile="E:/thing/cpp/tnt/include/fileIO/AssetCache.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="_asset_cache_8hpp_1a66a889f94d82532a21ce362cb17dea86" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtnt_1_1asset__cache_3_01_mix___chunk_00_01_i_01_4" kindref="compound">small_sfx_cache</ref> *</type>
        <definition>small_sfx_cache* tnt::default_sfx_cache</definition>
        <argsstring>() noexcept</argsstring>
        <name>default_sfx_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/AssetCache.hpp" line="28" column="28" bodyfile="E:/thing/cpp/tnt/include/fileIO/AssetCache.hpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_asset_cache_8hpp_1ada7d8284f322bfa47ac8e1b1ecfb2df4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtnt_1_1asset__cache_3_01_s_d_l___texture_00_01_i_01_4" kindref="compound">medium_texture_cache</ref> *</type>
        <definition>medium_texture_cache* tnt::default_texture_cache</definition>
        <argsstring>() noexcept</argsstring>
        <name>default_texture_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/AssetCache.hpp" line="29" column="33" bodyfile="E:/thing/cpp/tnt/include/fileIO/AssetCache.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="_asset_cache_8hpp_1a41b25531ab2b4ec167484a17e1459965" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtnt_1_1asset__cache_3_01_texture_atlas_00_01_i_01_4" kindref="compound">small_texture_atlas_cache</ref> *</type>
        <definition>small_texture_atlas_cache* tnt::default_texture_atlas_cache</definition>
        <argsstring>() noexcept</argsstring>
        <name>default_texture_atlas_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/fileIO/AssetCache.hpp" line="30" column="38" bodyfile="E:/thing/cpp/tnt/include/fileIO/AssetCache.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="_math_utils_8hpp_1a2000d9a2cf63844a560c59a13b5dfcd1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float tnt::operator&quot;&quot;_pi</definition>
        <argsstring>(unsigned long long num)</argsstring>
        <name>operator&quot;&quot;_pi</name>
        <param>
          <type>unsigned long long</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/MathUtils.hpp" line="172" column="28" bodyfile="E:/thing/cpp/tnt/include/math/MathUtils.hpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="_rectangle_8hpp_1aacc04fabb1f6f3123de95b2820d9f6b2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref></type>
        <definition>constexpr Rectangle tnt::operator+</definition>
        <argsstring>(Rectangle const &amp;lhs, Rectangle const &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Rectangle.hpp" line="133" column="25" bodyfile="E:/thing/cpp/tnt/include/math/Rectangle.hpp" bodystart="133" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="_rectangle_8hpp_1abcd95347295998919d4acfb1df61d315" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref></type>
        <definition>constexpr Rectangle tnt::operator+</definition>
        <argsstring>(Rectangle const &amp;lhs, Vector const &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Rectangle.hpp" line="140" column="25" bodyfile="E:/thing/cpp/tnt/include/math/Rectangle.hpp" bodystart="140" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="_rectangle_8hpp_1af6cdf5e5f3e6bfff51d50269e3bc6013" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref></type>
        <definition>constexpr Rectangle tnt::operator-</definition>
        <argsstring>(Rectangle const &amp;lhs, Rectangle const &amp;rhs) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Rectangle.hpp" line="147" column="25" bodyfile="E:/thing/cpp/tnt/include/math/Rectangle.hpp" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="_rectangle_8hpp_1aea452ee5ac4a00893a386e258a808931" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref></type>
        <definition>constexpr Rectangle tnt::operator-</definition>
        <argsstring>(Rectangle const &amp;lhs, Vector const &amp;rhs) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Rectangle.hpp" line="154" column="25" bodyfile="E:/thing/cpp/tnt/include/math/Rectangle.hpp" bodystart="154" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="_rectangle_8hpp_1a046e3275071040ffb526b1d8b281e4d0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref></type>
        <definition>constexpr Rectangle tnt::operator*</definition>
        <argsstring>(Rectangle const &amp;lhs, float const &amp;num) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Rectangle.hpp" line="161" column="25" bodyfile="E:/thing/cpp/tnt/include/math/Rectangle.hpp" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="_rectangle_8hpp_1a81f91f77056fd2fda53b1abc607c846b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref></type>
        <definition>constexpr Rectangle tnt::operator/</definition>
        <argsstring>(Rectangle const &amp;lhs, float const &amp;num) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Rectangle.hpp" line="166" column="25" bodyfile="E:/thing/cpp/tnt/include/math/Rectangle.hpp" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="_rectangle_8hpp_1a3a3afd70612667da74d2f2da6855719d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref></type>
        <definition>constexpr Rectangle tnt::operator*</definition>
        <argsstring>(Rectangle const &amp;lhs, Vector const &amp;scale) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Rectangle.hpp" line="171" column="25" bodyfile="E:/thing/cpp/tnt/include/math/Rectangle.hpp" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="_rectangle_8hpp_1a1617e104ab2e09dcdf42000f0d44b72c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref></type>
        <definition>constexpr Rectangle tnt::operator/</definition>
        <argsstring>(Rectangle const &amp;lhs, Vector const &amp;scale) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Rectangle.hpp" line="177" column="25" bodyfile="E:/thing/cpp/tnt/include/math/Rectangle.hpp" bodystart="177" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="_rectangle_8hpp_1a141c11914b499211d328dd7ccdf642d1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tnt::operator==</definition>
        <argsstring>(Rectangle const &amp;lhs, Rectangle const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">Rectangle</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Rectangle.hpp" line="183" column="17" bodyfile="E:/thing/cpp/tnt/include/math/Rectangle.hpp" bodystart="183" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="_rectangle_8hpp_1ada81d6d3336aa53d744fdabeed404cea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; tnt::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, tnt::Rectangle const &amp;rhs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_rectangle" kindref="compound">tnt::Rectangle</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Rectangle.hpp" line="191" column="12" bodyfile="E:/thing/cpp/tnt/include/math/Rectangle.hpp" bodystart="191" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="_springing_8hpp_1a320d7923c363c290332f6198e7c22f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Spring</definition>
        <argsstring>(float &amp;x, float &amp;v, float xt, float zeta, float omega, float h)</argsstring>
        <name>Spring</name>
        <param>
          <type>float &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zeta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>omega</declname>
        </param>
        <param>
          <type>float</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Springing.hpp" line="19" column="10" bodyfile="E:/thing/cpp/tnt/include/math/Springing.hpp" bodystart="19" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="_springing_8hpp_1ac15469c472b1a942a14bf8a575c5c1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::seeSpring</definition>
        <argsstring>(float &amp;x, float &amp;v, float xt, float zeta, float omega, float h)</argsstring>
        <name>seeSpring</name>
        <param>
          <type>float &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zeta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>omega</declname>
        </param>
        <param>
          <type>float</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Springing.hpp" line="41" column="10" bodyfile="E:/thing/cpp/tnt/include/math/Springing.hpp" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="_springing_8hpp_1aa46c8698fe2eb0e3e48539d7a975012e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::hlSpring</definition>
        <argsstring>(float &amp;x, float &amp;v, float xt, float omega, float h, float lambda)</argsstring>
        <name>hlSpring</name>
        <param>
          <type>float &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>omega</declname>
        </param>
        <param>
          <type>float</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Springing.hpp" line="58" column="10" bodyfile="E:/thing/cpp/tnt/include/math/Springing.hpp" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a94765dd56d0d97f313dc71ee8a4ce52f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>constexpr Vector tnt::operator+</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="133" column="22" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1ab481a40f45202f6a3edeb818deb64c9d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>constexpr Vector tnt::operator-</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="139" column="22" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a7befc7ada8ad5457649b612911d2231f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>constexpr Vector tnt::operator*</definition>
        <argsstring>(const Vector &amp;vec, const float &amp;num) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="145" column="22" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1afff77f85a6f83f2e832dde34863b4d7c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>constexpr Vector tnt::operator/</definition>
        <argsstring>(const Vector &amp;vec, const float &amp;num) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="151" column="22" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a259719926055890c818c3f3f65d34b47" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float tnt::Magnitude</definition>
        <argsstring>(float x, float y) noexcept</argsstring>
        <name>Magnitude</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="157" column="21" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a7d76c9bcd326fbea3062a9fda8bf7e8f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float tnt::AngleOfR</definition>
        <argsstring>(Vector const &amp;lhs, Vector const &amp;rhs) noexcept</argsstring>
        <name>AngleOfR</name>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="162" column="18" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a7fffb4bacb42d4d0f467b9f3e364bfea" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float tnt::AngleOfR</definition>
        <argsstring>(Vector const &amp;vec) noexcept</argsstring>
        <name>AngleOfR</name>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="168" column="18" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a40058dd069097b7c373430cdf1869326" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float tnt::AngleOf</definition>
        <argsstring>(Vector const &amp;lhs, Vector const &amp;rhs) noexcept</argsstring>
        <name>AngleOf</name>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="173" column="18" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1ad91fb067c3a2114b06e476cdbaa9cbb6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float tnt::AngleOf</definition>
        <argsstring>(Vector const &amp;vec) noexcept</argsstring>
        <name>AngleOf</name>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="179" column="18" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a2effba4a856880f94f16632165ad5078" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float tnt::Dot</definition>
        <argsstring>(Vector const &amp;lhs, Vector const &amp;rhs) noexcept</argsstring>
        <name>Dot</name>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="184" column="21" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a4793fb339935d76e50d91f34b21daf6b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float tnt::Cross</definition>
        <argsstring>(Vector const &amp;lhs, Vector const &amp;rhs) noexcept</argsstring>
        <name>Cross</name>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="189" column="21" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a3c579241f7295b30a2096349fbf17b15" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector tnt::RotateVector</definition>
        <argsstring>(Vector const &amp;vec, float angle) noexcept</argsstring>
        <name>RotateVector</name>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="195" column="19" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="195" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a306997f277f56f600b7c515acb0c9a72" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector tnt::nlerp</definition>
        <argsstring>(Vector const &amp;left, Vector const &amp;right, float pct) noexcept</argsstring>
        <name>nlerp</name>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>float</type>
          <declname>pct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="205" column="19" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1ab0c2d26c42b88b983382dc9cc45d64c1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::operator==</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="211" column="20" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1ab325091dde38f1b39b9001be4cc6a055" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::operator&lt;=</definition>
        <argsstring>(Vector const &amp;lhs, Vector const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="218" column="15" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a633013e3fc670d6d6cd2b7dfe7e30bad" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::operator&gt;=</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="224" column="20" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8hpp_1a7a7a1fb38a8a12fa01f5383453c671bb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::operator!=</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/math/Vector.hpp" line="230" column="20" bodyfile="E:/thing/cpp/tnt/include/math/Vector.hpp" bodystart="230" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="_any_8hpp_1a036b7a654d9a0cca1b25de50c37580c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>detail::not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::sized_any</definition>
        <argsstring>(T &amp;&amp;) -&gt; sized_any&lt; sizeof(T)&gt;</argsstring>
        <name>sized_any</name>
        <param>
          <type>T &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="276" column="5" declfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" declline="276" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_any_8hpp_1a9446245f07c3fc75f09d49a1f29ce194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>detail::not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::sized_any</definition>
        <argsstring>(tnt::in_place_tag_t&lt; T &gt;, Args &amp;&amp;...) -&gt; sized_any&lt; sizeof(T)&gt;</argsstring>
        <name>sized_any</name>
        <param>
          <type><ref refid="structtnt_1_1in__place__tag__t" kindref="compound">tnt::in_place_tag_t</ref>&lt; T &gt;</type>
        </param>
        <param>
          <type>Args &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="279" column="5" declfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" declline="279" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_any_8hpp_1a14095b019138be7e7245fa222c75657f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>detail::not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::sized_any</definition>
        <argsstring>(tnt::size_tag_t&lt; S &gt;, T &amp;&amp;) -&gt; sized_any&lt; S &gt;</argsstring>
        <name>sized_any</name>
        <param>
          <type><ref refid="structtnt_1_1size__tag__t" kindref="compound">tnt::size_tag_t</ref>&lt; S &gt;</type>
        </param>
        <param>
          <type>T &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="282" column="5" declfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" declline="282" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_any_8hpp_1a14bbc1adad5f270ff0389d22d97f8a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>detail::not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::sized_any</definition>
        <argsstring>(tnt::size_tag_t&lt; S &gt;, tnt::in_place_tag_t&lt; T &gt;, Args &amp;&amp;...) -&gt; sized_any&lt; S &gt;</argsstring>
        <name>sized_any</name>
        <param>
          <type><ref refid="structtnt_1_1size__tag__t" kindref="compound">tnt::size_tag_t</ref>&lt; S &gt;</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1in__place__tag__t" kindref="compound">tnt::in_place_tag_t</ref>&lt; T &gt;</type>
        </param>
        <param>
          <type>Args &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="285" column="5" declfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" declline="285" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_any_8hpp_1a4b58965f0af8dc0edfba184a953eb618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::sized_any</definition>
        <argsstring>(sized_any&lt; S &gt; const &amp;) -&gt; sized_any&lt; S &gt;</argsstring>
        <name>sized_any</name>
        <param>
          <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt; S &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="288" column="5" declfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" declline="288" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_any_8hpp_1abcf196856dc1c899503e63e2442c6ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::sized_any</definition>
        <argsstring>(sized_any&lt; S &gt; &amp;&amp;) -&gt; sized_any&lt; S &gt;</argsstring>
        <name>sized_any</name>
        <param>
          <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt; S &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="291" column="5" declfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" declline="291" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_any_8hpp_1a9ce8cc0d8713ada3b75ead2eb4ee9bac" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>detail::not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T tnt::any_cast</definition>
        <argsstring>(sized_any&lt; S &gt; &amp;obj) noexcept(noexcept(obj.template to&lt; T &gt;()))</argsstring>
        <name>any_cast</name>
        <param>
          <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt; S &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="294" column="14" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="_any_8hpp_1a28ec83cb030a8f22b2b02ebcc2d49768" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>detail::not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T tnt::any_cast</definition>
        <argsstring>(sized_any&lt; S &gt; const &amp;obj) noexcept(noexcept(obj.template to&lt; T &gt;()))</argsstring>
        <name>any_cast</name>
        <param>
          <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt; S &gt; const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="300" column="14" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="_any_8hpp_1a5df97f1926100dbeecca1c5805d15246" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>detail::not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T tnt::any_cast</definition>
        <argsstring>(sized_any&lt; S &gt; &amp;&amp;obj) noexcept(noexcept(obj.template to&lt; T &gt;()))</argsstring>
        <name>any_cast</name>
        <param>
          <type><ref refid="classtnt_1_1sized__any" kindref="compound">sized_any</ref>&lt; S &gt; &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="306" column="14" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="306" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="_any_8hpp_1a1f569bc6ae823a446943e33152295c6e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>detail::not_any</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::make_any</definition>
        <argsstring>(Args &amp;&amp;... args) noexcept(std::is_nothrow_constructible_v&lt; T, Args... &gt;)</argsstring>
        <name>make_any</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/Any.hpp" line="316" column="20" bodyfile="E:/thing/cpp/tnt/include/mirror/Any.hpp" bodystart="316" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1affe3cca9c29bafb2599e658db530d85f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classtnt_1_1type__info" kindref="compound">type_info</ref></type>
        <definition>constexpr type_info tnt::type_id</definition>
        <argsstring>() noexcept</argsstring>
        <name>type_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/TypeInfo.hpp" line="66" column="25" bodyfile="E:/thing/cpp/tnt/include/mirror/TypeInfo.hpp" bodystart="66" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="_type_info_8hpp_1aba9f145d73682521b83eaa49635f12c5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classtnt_1_1type__info" kindref="compound">type_info</ref></type>
        <definition>constexpr type_info tnt::type_id</definition>
        <argsstring>(T) noexcept</argsstring>
        <name>type_id</name>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/mirror/TypeInfo.hpp" line="98" column="25" bodyfile="E:/thing/cpp/tnt/include/mirror/TypeInfo.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="_random_8hpp_1ae0f1d75d4d2c4060c6ba392baac9f4ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TNT_API float</type>
        <definition>TNT_API float tnt::randomFloat</definition>
        <argsstring>(float min_, float max_)</argsstring>
        <name>randomFloat</name>
        <param>
          <type>float</type>
          <declname>min_</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_</declname>
        </param>
        <briefdescription>
<para>Get a random float on range <computeroutput></computeroutput>[min_,max_]. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value of the float. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum value of the float. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/pcg/Random.hpp" line="16" column="26" bodyfile="E:/thing/cpp/tnt/include/pcg/Random.hpp" bodystart="16" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="_random_8hpp_1ab7a318d8d363b0a0d63b3ae6c55eeb5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TNT_API int</type>
        <definition>TNT_API int tnt::randomInt</definition>
        <argsstring>(int min_, int max_)</argsstring>
        <name>randomInt</name>
        <param>
          <type>int</type>
          <declname>min_</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_</declname>
        </param>
        <briefdescription>
<para>Get a random int on range <computeroutput></computeroutput>[min_,max_]. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value of the int. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum value of the int. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/pcg/Random.hpp" line="28" column="24" bodyfile="E:/thing/cpp/tnt/include/pcg/Random.hpp" bodystart="28" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="_random_8hpp_1a45a9b2e789f45cace1dd64569883a676" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TNT_API <ref refid="structtnt_1_1_vector" kindref="compound">tnt::Vector</ref></type>
        <definition>TNT_API tnt::Vector tnt::randomVector</definition>
        <argsstring>(float minX, float maxX, float minY, float maxY)</argsstring>
        <name>randomVector</name>
        <param>
          <type>float</type>
          <declname>minX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>minY</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxY</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="structtnt_1_1_vector" kindref="compound">tnt::Vector</ref> with randomly generated coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minX</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value of the x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxX</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum value of the x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minY</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value of the y coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxY</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum value of the y coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structtnt_1_1_vector" kindref="compound">tnt::Vector</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/pcg/Random.hpp" line="42" column="32" bodyfile="E:/thing/cpp/tnt/include/pcg/Random.hpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="_random_8hpp_1a78e23bb7181408945c41cec11ca32069" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TNT_API <ref refid="structtnt_1_1_vector" kindref="compound">tnt::Vector</ref></type>
        <definition>TNT_API tnt::Vector tnt::randomUnitVector</definition>
        <argsstring>()</argsstring>
        <name>randomUnitVector</name>
        <briefdescription>
<para>Create a randomly generated <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> with magnitude 1. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structtnt_1_1_vector" kindref="compound">tnt::Vector</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/pcg/Random.hpp" line="49" column="32" bodyfile="E:/thing/cpp/tnt/include/pcg/Random.hpp" bodystart="49" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="_random_8hpp_1a289e0ce3a7a2c36620aca148eba09fca" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::integral</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>TNT_API auto</type>
        <definition>TNT_API auto tnt::halton1</definition>
        <argsstring>(I const base, I index) noexcept</argsstring>
        <name>halton1</name>
        <param>
          <type>I const</type>
          <declname>base</declname>
        </param>
        <param>
          <type>I</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Generate a random number using a Halton sequence. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/pcg/Random.hpp" line="57" column="25" bodyfile="E:/thing/cpp/tnt/include/pcg/Random.hpp" bodystart="57" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="_random_8hpp_1a62365fb98c548a7b6158cea9eaef1cef" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::integral</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>TNT_API <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>TNT_API Vector tnt::halton2</definition>
        <argsstring>(I const baseX, I const baseY, I index) noexcept</argsstring>
        <name>halton2</name>
        <param>
          <type>I const</type>
          <declname>baseX</declname>
        </param>
        <param>
          <type>I const</type>
          <declname>baseY</declname>
        </param>
        <param>
          <type>I</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Generate a random <ref refid="structtnt_1_1_vector" kindref="compound">Vector</ref> using Halton sequences. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/pcg/Random.hpp" line="71" column="27" bodyfile="E:/thing/cpp/tnt/include/pcg/Random.hpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="_containers_8hpp_1a30cca6c0ba03fd05ef7ccb98c973e39e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::input_range</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>std::ranges::range_value_t&lt;R&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::contains</definition>
        <argsstring>(R const &amp;rng, std::remove_cvref_t&lt; T &gt; const &amp;value)</argsstring>
        <name>contains</name>
        <param>
          <type>R const &amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>std::remove_cvref_t&lt; T &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Check if the range with the given begin/end contains a certain value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the element to search. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired value to find. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Containers.hpp" line="149" column="20" bodyfile="E:/thing/cpp/tnt/include/types/Containers.hpp" bodystart="149" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="_containers_8hpp_1a1ad1828980196afb3c703ea309b94155" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>const auto</type>
        <definition>const auto tnt::matches</definition>
        <argsstring>(const R &amp;range, Ts... ts) noexcept</argsstring>
        <name>matches</name>
        <param>
          <type>const R &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Ts...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Containers.hpp" line="159" column="23" bodyfile="E:/thing/cpp/tnt/include/types/Containers.hpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="_containers_8hpp_1acc5efed01fbf8e37789f9a455c2a0230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; tnt::make_vector</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>make_vector</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Containers.hpp" line="167" column="17" bodyfile="E:/thing/cpp/tnt/include/types/Containers.hpp" bodystart="167" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="_containers_8hpp_1a495406393c6a712520cdb71a865b2d12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tnt::set_insert_all</definition>
        <argsstring>(T &amp;set, Ts... ts)</argsstring>
        <name>set_insert_all</name>
        <param>
          <type>T &amp;</type>
          <declname>set</declname>
        </param>
        <param>
          <type>Ts...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Containers.hpp" line="177" column="17" bodyfile="E:/thing/cpp/tnt/include/types/Containers.hpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="_containers_8hpp_1af43fe7bc79a974426110b3107a27ea4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tnt::vector_insert_all</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vec, Ts... ts)</argsstring>
        <name>vector_insert_all</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>Ts...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Containers.hpp" line="184" column="17" bodyfile="E:/thing/cpp/tnt/include/types/Containers.hpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="_containers_8hpp_1afbb9d2fb48846971bf8f191a6de62e07" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tnt::quick_remove_at</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;v, std::size_t idx) noexcept</argsstring>
        <name>quick_remove_at</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Containers.hpp" line="190" column="17" bodyfile="E:/thing/cpp/tnt/include/types/Containers.hpp" bodystart="190" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="_containers_8hpp_1a48e8241b22b79ef7c98542982264593d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tnt::quick_remove_at</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;v, typename std::vector&lt; T &gt;::iterator it) noexcept</argsstring>
        <name>quick_remove_at</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>typename std::vector&lt; T &gt;::iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Containers.hpp" line="200" column="17" bodyfile="E:/thing/cpp/tnt/include/types/Containers.hpp" bodystart="200" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="_containers_8hpp_1abe2b6f0b99e1f46c06c806bc1c21667a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tnt::insert_sorted</definition>
        <argsstring>(C &amp;v, const T &amp;item)</argsstring>
        <name>insert_sorted</name>
        <param>
          <type>C &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Containers.hpp" line="212" column="10" bodyfile="E:/thing/cpp/tnt/include/types/Containers.hpp" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="_containers_8hpp_1aca7b4307c3d768003462df46f85e21c1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tnt::within</definition>
        <argsstring>(T min, T max, Ts... ts) noexcept</argsstring>
        <name>within</name>
        <param>
          <type>T</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <param>
          <type>Ts...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Containers.hpp" line="220" column="17" bodyfile="E:/thing/cpp/tnt/include/types/Containers.hpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="_expected_8hpp_1a536d96c329e769b858e9efa6d65b2f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::Expected</definition>
        <argsstring>(T) -&gt; Expected&lt; T &gt;</argsstring>
        <name>Expected</name>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Expected.hpp" line="221" column="5" declfile="E:/thing/cpp/tnt/include/types/Expected.hpp" declline="221" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_expected_8hpp_1a0e64547fb6a1fe93408bafdb70e70fb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::Expected</definition>
        <argsstring>(T[]) -&gt; Expected&lt; T[]&gt;</argsstring>
        <name>Expected</name>
        <param>
          <type>T</type>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Expected.hpp" line="224" column="5" declfile="E:/thing/cpp/tnt/include/types/Expected.hpp" declline="224" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_expected_8hpp_1a21336e25cbd8324587feddf8bfd8cd8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::Expected</definition>
        <argsstring>(Args &amp;&amp;...) -&gt; Expected&lt; std::tuple&lt; Args... &gt;&gt;</argsstring>
        <name>Expected</name>
        <param>
          <type>Args &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Expected.hpp" line="227" column="5" declfile="E:/thing/cpp/tnt/include/types/Expected.hpp" declline="227" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_scope_utils_8hpp_1ad5baad5c35d18814e8cd0afe3330849a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto tnt::on_exit</definition>
        <argsstring>(detail::callable auto &amp;&amp;f)</argsstring>
        <name>on_exit</name>
        <param>
          <type>detail::callable auto &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Run a function when exiting the current scope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>A callable object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/ScopeUtils.hpp" line="111" column="8" bodyfile="E:/thing/cpp/tnt/include/types/ScopeUtils.hpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="_sort_8hpp_1a637931aeb8b713f34474512bbe5a242b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::input_range</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::bubble_sort_view</definition>
        <argsstring>(R &amp;&amp;) noexcept -&gt; bubble_sort_view&lt; std::ranges::views::all_t&lt; R &gt;&gt;</argsstring>
        <name>bubble_sort_view</name>
        <param>
          <type>R &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Sort.hpp" line="55" column="5" declfile="E:/thing/cpp/tnt/include/types/Sort.hpp" declline="55" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_sort_8hpp_1a4ab32d59351cf43f07f3b24ae0c70980" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::input_range</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classtnt_1_1bubble__sort__view" kindref="compound">bubble_sort_view</ref>&lt; std::ranges::views::all_t&lt; R &gt; &gt;</type>
        <definition>constexpr bubble_sort_view&lt;std::ranges::views::all_t&lt;R&gt; &gt; tnt::operator|</definition>
        <argsstring>(R &amp;&amp;rng, bubble_sort_fn const &amp;) noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>R &amp;&amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1bubble__sort__fn" kindref="compound">bubble_sort_fn</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/Sort.hpp" line="70" column="5" bodyfile="E:/thing/cpp/tnt/include/types/Sort.hpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="_sparse_set_8hpp_1aeb6cd3916d9a8ce94b40c8e69a1cc3aa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::sparse_iterator</definition>
        <argsstring>(sparse_set&lt; T &gt; const *) noexcept -&gt; sparse_iterator&lt; T &gt;</argsstring>
        <name>sparse_iterator</name>
        <param>
          <type><ref refid="classtnt_1_1sparse__set" kindref="compound">sparse_set</ref>&lt; T &gt; const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/SparseSet.hpp" line="347" column="5" declfile="E:/thing/cpp/tnt/include/types/SparseSet.hpp" declline="347" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_sparse_set_8hpp_1a0ad08f7990a4161fa9797477055ef7bf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::sparse_iterator</definition>
        <argsstring>(sparse_set&lt; T &gt; const *, as_sentinel_t) noexcept -&gt; sparse_iterator&lt; T &gt;</argsstring>
        <name>sparse_iterator</name>
        <param>
          <type><ref refid="classtnt_1_1sparse__set" kindref="compound">sparse_set</ref>&lt; T &gt; const *</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1as__sentinel__t" kindref="compound">as_sentinel_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/SparseSet.hpp" line="350" column="5" declfile="E:/thing/cpp/tnt/include/types/SparseSet.hpp" declline="350" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_sparse_set_8hpp_1a6275f11a70202e979eee4e51458026f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tnt::operator==</definition>
        <argsstring>(sparse_iterator&lt; T &gt;, sparse_iterator&lt; U &gt;)=delete</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classtnt_1_1sparse__iterator" kindref="compound">sparse_iterator</ref>&lt; T &gt;</type>
        </param>
        <param>
          <type><ref refid="classtnt_1_1sparse__iterator" kindref="compound">sparse_iterator</ref>&lt; U &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/SparseSet.hpp" line="359" column="10" declfile="E:/thing/cpp/tnt/include/types/SparseSet.hpp" declline="359" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="_sparse_set_8hpp_1a2af4057616fbc1d850661eba6b39233e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtnt_1_1sparse__iterator" kindref="compound">sparse_iterator</ref>&lt; T &gt;</type>
        <definition>sparse_iterator&lt;T&gt; tnt::operator+</definition>
        <argsstring>(typename sparse_iterator&lt; T &gt;::difference_type const diff, sparse_iterator&lt; T &gt; const &amp;it)</argsstring>
        <name>operator+</name>
        <param>
          <type>typename <ref refid="classtnt_1_1sparse__iterator" kindref="compound">sparse_iterator</ref>&lt; T &gt;::difference_type const</type>
          <declname>diff</declname>
        </param>
        <param>
          <type><ref refid="classtnt_1_1sparse__iterator" kindref="compound">sparse_iterator</ref>&lt; T &gt; const &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/SparseSet.hpp" line="362" column="28" bodyfile="E:/thing/cpp/tnt/include/types/SparseSet.hpp" bodystart="362" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="_sparse_set_8hpp_1a3d15732e6056df028afbcb54ae8119a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tnt::operator&lt;=&gt;</definition>
        <argsstring>(sparse_iterator&lt; T &gt;, sparse_iterator&lt; U &gt;)=delete</argsstring>
        <name>operator&lt;=&gt;</name>
        <param>
          <type><ref refid="classtnt_1_1sparse__iterator" kindref="compound">sparse_iterator</ref>&lt; T &gt;</type>
        </param>
        <param>
          <type><ref refid="classtnt_1_1sparse__iterator" kindref="compound">sparse_iterator</ref>&lt; U &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/SparseSet.hpp" line="370" column="5" declfile="E:/thing/cpp/tnt/include/types/SparseSet.hpp" declline="370" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_sparse_set_8hpp_1a53f27df198e6ea5c357aa1814b7ad651" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtnt_1_1sparse__set" kindref="compound">sparse_set</ref>&lt; T &gt;::iterator</type>
        <definition>sparse_set&lt;T&gt;::iterator tnt::begin</definition>
        <argsstring>(sparse_set&lt; T &gt; const &amp;sparse) noexcept</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="classtnt_1_1sparse__set" kindref="compound">sparse_set</ref>&lt; T &gt; const &amp;</type>
          <declname>sparse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/SparseSet.hpp" line="373" column="43" bodyfile="E:/thing/cpp/tnt/include/types/SparseSet.hpp" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="_sparse_set_8hpp_1a08afa4183e0c5af12d978b646f41f4c1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtnt_1_1sparse__set" kindref="compound">sparse_set</ref>&lt; T &gt;::const_iterator</type>
        <definition>sparse_set&lt;T&gt;::const_iterator tnt::cbegin</definition>
        <argsstring>(sparse_set&lt; T &gt; const &amp;sparse) noexcept</argsstring>
        <name>cbegin</name>
        <param>
          <type><ref refid="classtnt_1_1sparse__set" kindref="compound">sparse_set</ref>&lt; T &gt; const &amp;</type>
          <declname>sparse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/SparseSet.hpp" line="379" column="49" bodyfile="E:/thing/cpp/tnt/include/types/SparseSet.hpp" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="_sparse_set_8hpp_1a45be0e0333d1138eff229b6ff11a0b07" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtnt_1_1sparse__set" kindref="compound">sparse_set</ref>&lt; T &gt;::sentinel</type>
        <definition>sparse_set&lt;T&gt;::sentinel tnt::end</definition>
        <argsstring>(sparse_set&lt; T &gt; const &amp;sparse) noexcept</argsstring>
        <name>end</name>
        <param>
          <type><ref refid="classtnt_1_1sparse__set" kindref="compound">sparse_set</ref>&lt; T &gt; const &amp;</type>
          <declname>sparse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/SparseSet.hpp" line="386" column="43" bodyfile="E:/thing/cpp/tnt/include/types/SparseSet.hpp" bodystart="386" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="_sparse_set_8hpp_1a29b5dd779229964d44d7fca07c42c30b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtnt_1_1sparse__set" kindref="compound">sparse_set</ref>&lt; T &gt;::sentinel</type>
        <definition>sparse_set&lt;T&gt;::sentinel tnt::cend</definition>
        <argsstring>(sparse_set&lt; T &gt; const &amp;sparse) noexcept</argsstring>
        <name>cend</name>
        <param>
          <type><ref refid="classtnt_1_1sparse__set" kindref="compound">sparse_set</ref>&lt; T &gt; const &amp;</type>
          <declname>sparse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/SparseSet.hpp" line="392" column="43" bodyfile="E:/thing/cpp/tnt/include/types/SparseSet.hpp" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="_type_utils_8hpp_1ab488c503aad5218cb881faded2df4835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::overload</definition>
        <argsstring>(Ts...) -&gt; overload&lt; Ts... &gt;</argsstring>
        <name>overload</name>
        <param>
          <type>Ts...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/TypeUtils.hpp" line="15" column="5" declfile="E:/thing/cpp/tnt/include/types/TypeUtils.hpp" declline="15" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_type_utils_8hpp_1a527e1d44b7a72f2b45543dea8bc337bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Fn</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tnt::y_comb</definition>
        <argsstring>(Fn &amp;&amp;) -&gt; y_comb&lt; std::decay_t&lt; Fn &gt;&gt;</argsstring>
        <name>y_comb</name>
        <param>
          <type>Fn &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/types/TypeUtils.hpp" line="41" column="5" declfile="E:/thing/cpp/tnt/include/types/TypeUtils.hpp" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_bench_8hpp_1a541ae6f47b6c68af0f6fa57fdfdf6f79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TNT_API <ref refid="classtnt_1_1bench__stream" kindref="compound">bench_stream</ref> &amp;</type>
        <definition>TNT_API bench_stream&amp; tnt::operator&lt;&lt;</definition>
        <argsstring>(bench_stream const &amp;b, start_batch_tag const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classtnt_1_1bench__stream" kindref="compound">bench_stream</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1start__batch__tag" kindref="compound">start_batch_tag</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Bench.hpp" line="79" column="13" declfile="E:/thing/cpp/tnt/include/utils/Bench.hpp" declline="79" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_bench_8hpp_1a534f441714f3bb612df601c497c90b49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TNT_API <ref refid="classtnt_1_1bench__stream" kindref="compound">bench_stream</ref> &amp;</type>
        <definition>TNT_API bench_stream&amp; tnt::operator&lt;&lt;</definition>
        <argsstring>(bench_stream const &amp;b, end_batch_tag const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classtnt_1_1bench__stream" kindref="compound">bench_stream</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structtnt_1_1end__batch__tag" kindref="compound">end_batch_tag</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Bench.hpp" line="80" column="13" declfile="E:/thing/cpp/tnt/include/utils/Bench.hpp" declline="80" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_bench_8hpp_1a1b1f4f4c96fa6e8284e3ddf254a06395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TNT_API <ref refid="classtnt_1_1bench__stream" kindref="compound">bench_stream</ref> &amp;</type>
        <definition>TNT_API bench_stream&amp; tnt::operator&lt;&lt;</definition>
        <argsstring>(bench_stream &amp;b, std::string_view file)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classtnt_1_1bench__stream" kindref="compound">bench_stream</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/Bench.hpp" line="81" column="13" declfile="E:/thing/cpp/tnt/include/utils/Bench.hpp" declline="81" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_bit_flags_8hpp_1ae32b2dcbeef94ca8aed3ce7e5c138ec3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::has_flag</definition>
        <argsstring>(E const &amp;bit, E const &amp;flag) noexcept</argsstring>
        <name>has_flag</name>
        <param>
          <type>E const &amp;</type>
          <declname>bit</declname>
        </param>
        <param>
          <type>E const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="23" column="20" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="_bit_flags_8hpp_1acf780177a99b7ba0ecb4f69498402c2e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void tnt::set_flag</definition>
        <argsstring>(E &amp;bit, E const &amp;flag) noexcept</argsstring>
        <name>set_flag</name>
        <param>
          <type>E &amp;</type>
          <declname>bit</declname>
        </param>
        <param>
          <type>E const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="29" column="20" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="_bit_flags_8hpp_1acf5b874bfb83ec563b03396c0a98dd3c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void tnt::unset_flag</definition>
        <argsstring>(E &amp;bit, E const &amp;flag) noexcept</argsstring>
        <name>unset_flag</name>
        <param>
          <type>E &amp;</type>
          <declname>bit</declname>
        </param>
        <param>
          <type>E const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="35" column="20" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="_bit_flags_8hpp_1a0b0e85f0fac4c7c42c043225b29459b2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bit_mask</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void tnt::flip_flag</definition>
        <argsstring>(E &amp;bit, E const &amp;flag) noexcept</argsstring>
        <name>flip_flag</name>
        <param>
          <type>E &amp;</type>
          <declname>bit</declname>
        </param>
        <param>
          <type>E const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" line="41" column="20" bodyfile="E:/thing/cpp/tnt/include/utils/BitFlags.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/thing/cpp/tnt/include/async/CoUtils.hpp" line="8" column="1"/>
  </compounddef>
</doxygen>
