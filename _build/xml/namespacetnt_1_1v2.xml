<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="namespacetnt_1_1v2" kind="namespace" language="C++">
    <compoundname>tnt::v2</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="_type_listsv2_8hpp_1a41e668f66e110623fa5ad1c75d91da92" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t tnt::v2::size</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>size</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="104" column="31" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1ac72eafe20a2ae7c32cea34a4657a5748" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::v2::empty</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>empty</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="107" column="25" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a81f9afa2aa625afb8b62f4460a1e8290" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::v2::contains</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>contains</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="110" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a5956ffa9e86f95a728cc5f8f5318bcba" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::v2::contains</definition>
        <argsstring>(type_list&lt; Ts... &gt;, type_list&lt; Us... &gt;) noexcept</argsstring>
        <name>contains</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Us... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="113" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a59cea887264fa75e7ec3c218cdad4301" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_tag</ref>&lt; T &gt;</type>
        <definition>constexpr type_tag&lt;T&gt; tnt::v2::front</definition>
        <argsstring>(type_list&lt; T, Ts... &gt;) noexcept</argsstring>
        <name>front</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; T, Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="120" column="28" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1ae1afe5ce51afc800ec38754588cd996f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        <definition>constexpr type_list&lt;Ts...&gt; tnt::v2::back</definition>
        <argsstring>(type_list&lt; T, Ts... &gt;) noexcept</argsstring>
        <name>back</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; T, Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="123" column="29" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a028c41b43cb62843c17ff6697ee45b3c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_tag</ref>&lt; T &gt;</type>
        <definition>constexpr type_tag&lt;T&gt; tnt::v2::back</definition>
        <argsstring>(type_list&lt; T &gt;) noexcept</argsstring>
        <name>back</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; T &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="126" column="28" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a3af5e1729dc9b4d8e447fed70f9b01f3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; T, Ts... &gt;</type>
        <definition>constexpr type_list&lt;T, Ts...&gt; tnt::v2::push_front</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>push_front</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="130" column="29" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a8a0efd92dd0b74abe9842efa6e0b4e15" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Us..., Ts... &gt;</type>
        <definition>constexpr type_list&lt;Us..., Ts...&gt; tnt::v2::push_front</definition>
        <argsstring>(type_list&lt; Ts... &gt;, type_list&lt; Us... &gt;) noexcept</argsstring>
        <name>push_front</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Us... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="133" column="29" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a728f60208b809a9b4588bb950d82f764" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts..., T &gt;</type>
        <definition>constexpr type_list&lt;Ts..., T&gt; tnt::v2::push_back</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="136" column="29" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a8f926a8fd85a1239342d9f8992540d76" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts..., Us... &gt;</type>
        <definition>constexpr type_list&lt;Ts..., Us...&gt; tnt::v2::push_back</definition>
        <argsstring>(type_list&lt; Ts... &gt;, type_list&lt; Us... &gt;) noexcept</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Us... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="139" column="29" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1ac9c460dc88707fc784516540c90c523d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        <definition>constexpr type_list&lt;Ts...&gt; tnt::v2::pop_front</definition>
        <argsstring>(type_list&lt; T, Ts... &gt;) noexcept</argsstring>
        <name>pop_front</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; T, Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="143" column="29" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1afb31b577eb645c31359ab7d3cd661415" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Us... &gt;</type>
        <definition>constexpr type_list&lt;Us...&gt; tnt::v2::pop_front</definition>
        <argsstring>(type_list&lt; Ts..., Us... &gt;, type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>pop_front</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts..., Us... &gt;</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="146" column="29" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a0fba85fc92e14f5d8b1fbed10857c7f0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        <definition>constexpr type_list&lt;Ts...&gt; tnt::v2::pop_back</definition>
        <argsstring>(type_list&lt; Ts..., T &gt;) noexcept</argsstring>
        <name>pop_back</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts..., T &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="149" column="29" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a64b5100ee076e149908d0c418586adc0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        <definition>constexpr type_list&lt;Ts...&gt; tnt::v2::pop_back</definition>
        <argsstring>(type_list&lt; Ts..., Us... &gt;, type_list&lt; Us... &gt;) noexcept</argsstring>
        <name>pop_back</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts..., Us... &gt;</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Us... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="152" column="29" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1ad8a04ba6806e7e5243647e6bdd6d9512" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::v2::get</definition>
        <argsstring>(type_list&lt; T, Ts... &gt;) noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; T, Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="156" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="156" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a8496156c26cdfd119ce4ec9099bf32cb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t tnt::v2::find</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>find</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="166" column="31" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="166" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a339ee41002e767525fb2ef6f56b5ea1e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; typename</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t tnt::v2::find_if</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>find_if</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="181" column="31" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="181" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a687df0726971821cac2820d06c016d87" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t tnt::v2::find_if</definition>
        <argsstring>(A, type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>find_if</name>
        <param>
          <type>A</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="196" column="31" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="196" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a65a3625e255339b019863ac52f8cdc5c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; typename</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::v2::all_of</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>all_of</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="212" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1af2c1465faae0c92829070411fb4af880" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::v2::all_of</definition>
        <argsstring>(P, type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>all_of</name>
        <param>
          <type>P</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="218" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1ad161d822c905739a9656a6cd8aa3fcf7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; typename</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::v2::any_of</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>any_of</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="224" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a1e0b973492540590001a645334dc6bf2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::v2::any_of</definition>
        <argsstring>(P, type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>any_of</name>
        <param>
          <type>P</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="230" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a6b537fb409d0f210f4631c2426bb8d41" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; typename</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::v2::none_of</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>none_of</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="236" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1ad3d5c259d67f4d9d4852a9a194d5d043" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tnt::v2::none_of</definition>
        <argsstring>(P, type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>none_of</name>
        <param>
          <type>P</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="242" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1af4e21cc01da7cc74737e4d106d831f5b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; typename</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; typename P&lt; Ts &gt;::type... &gt;</type>
        <definition>constexpr type_list&lt;typename P&lt;Ts&gt;::type...&gt; tnt::v2::transform</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>transform</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="249" column="30" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a3139f59eb5704a2f7a4c4e74523d1efd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; decltype(P{}(make_tag&lt; Ts &gt;))... &gt;</type>
        <definition>constexpr type_list&lt;decltype(P{}(make_tag&lt;Ts&gt;))...&gt; tnt::v2::transform</definition>
        <argsstring>(P, type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>transform</name>
        <param>
          <type>P</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="252" column="29" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a0885f2e531fddcc778fc27256fc5f879" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::v2::reverse</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>reverse</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="258" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="258" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1af4868af7f63aa81e01b2715ce0a491bf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::v2::generate</definition>
        <argsstring>() noexcept</argsstring>
        <name>generate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="268" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="268" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1a8a026d827496290107eee7bdd8438700" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::v2::generate</definition>
        <argsstring>(type_tag&lt; T &gt;) noexcept</argsstring>
        <name>generate</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_tag</ref>&lt; T &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="278" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="278" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1ac641446d8e380c26fabcbcd6e8417cd9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; typename</type>
            <declname>P</declname>
            <defname>P</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::v2::filter</definition>
        <argsstring>(type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>filter</name>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="289" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="289" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="_type_listsv2_8hpp_1af309639c9bdad561657f3e44d33f49cc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto tnt::v2::filter</definition>
        <argsstring>(P, type_list&lt; Ts... &gt;) noexcept</argsstring>
        <name>filter</name>
        <param>
          <type>P</type>
        </param>
        <param>
          <type><ref refid="structtnt_1_1type__list" kindref="compound">type_list</ref>&lt; Ts... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="304" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" bodystart="304" bodyend="315"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/thing/cpp/tnt/include/exp/TypeListsv2.hpp" line="100" column="5"/>
  </compounddef>
</doxygen>
