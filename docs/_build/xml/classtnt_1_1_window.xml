<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classtnt_1_1_window" kind="class" language="C++" prot="public" final="yes">
    <compoundname>tnt::Window</compoundname>
    <includes local="no">Window.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtnt_1_1_window_1ab76f2033e9fed6291e8d6be961d5f3d5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool tnt::Window::running</definition>
        <argsstring></argsstring>
        <name>running</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="166" column="14" bodyfile="E:/thing/cpp/tnt/include/core/Window.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtnt_1_1_window_1a54936bce1568de5c3a197d1593d3fb67" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tnt::Window::w</definition>
        <argsstring></argsstring>
        <name>w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="167" column="13" bodyfile="E:/thing/cpp/tnt/include/core/Window.hpp" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtnt_1_1_window_1aa250186af6f74b41514839294aba350c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tnt::Window::h</definition>
        <argsstring></argsstring>
        <name>h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="167" column="15" bodyfile="E:/thing/cpp/tnt/include/core/Window.hpp" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtnt_1_1_window_1a4a2759e110a4a06540fdc77fa0d7048c" prot="private" static="no" mutable="no">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer* tnt::Window::renderer</definition>
        <argsstring></argsstring>
        <name>renderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="168" column="22" bodyfile="E:/thing/cpp/tnt/include/core/Window.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtnt_1_1_window_1ac01cd4348c89071a42b3fff7fe7ddad4" prot="private" static="no" mutable="no">
        <type>SDL_Window *</type>
        <definition>SDL_Window* tnt::Window::window</definition>
        <argsstring></argsstring>
        <name>window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="169" column="20" bodyfile="E:/thing/cpp/tnt/include/core/Window.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtnt_1_1_window_1a0dc778038920407f422c15c418eb4c41" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tnt::Window::Window</definition>
        <argsstring>(std::string_view title, int xpos, int ypos, int width, int height, Uint32 flags) noexcept</argsstring>
        <name>Window</name>
        <param>
          <type>std::string_view</type>
          <declname>title</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ypos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Creates a window with the given parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The title of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>The x position of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>The y position of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags the window should have. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="31" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a6738e54fa604a1578569afb3094d1885" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tnt::Window::Window</definition>
        <argsstring>(std::string_view title, int width, int height) noexcept</argsstring>
        <name>Window</name>
        <param>
          <type>std::string_view</type>
          <declname>title</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The title of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a03ae6311e5dfb2043c6c56583096d7c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tnt::Window::~Window</definition>
        <argsstring>() noexcept</argsstring>
        <name>~Window</name>
        <briefdescription>
<para>Destroys the window and clears the memory occupied by it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="41" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a3cb26f044ada9a2dc4f981d90392cffe" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tnt::Window::operator SDL_Window *</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator SDL_Window *</name>
        <briefdescription>
<para>Returns the SDL_Window* of the <ref refid="classtnt_1_1_window" kindref="compound">Window</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SDL_Window* </para>
</simplesect>
<simplesect kind="note"><para>SDL_Renderer* can be obtained by calling <ref refid="classtnt_1_1_window_1a925a862cbfddfe5978c00a3eb6fa52cd" kindref="member">getRenderer()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="46" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a925a862cbfddfe5978c00a3eb6fa52cd" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer* tnt::Window::getRenderer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getRenderer</name>
        <briefdescription>
<para>Returns the SDL_Renderer* of the <ref refid="classtnt_1_1_window" kindref="compound">Window</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SDL_Renderer* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="50" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a913af425a1df97a56e2110ef71f34acf" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tnt::Window::getDisplayIndex</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getDisplayIndex</name>
        <briefdescription>
<para>Get the display index of the window. The function returns the display index of the display containing the center of the window, or -1 on error. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="56" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1ac062602e457104d22ff82785df20d7fb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tnt::Window::setDisplayMode</definition>
        <argsstring>(const SDL_DisplayMode *mode) noexcept</argsstring>
        <name>setDisplayMode</name>
        <param>
          <type>const SDL_DisplayMode *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set the display mode used when a fullscreen window is visible. By default the window&apos;s dimensions and the desktop format and refresh rate are used. The functions returns 0 on success, or -1 if setting the display mode failed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode to use, or NULL for the default mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="64" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1ae7ff24c6349d7b1716cc7267134f16e0" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>SDL_DisplayMode *</type>
        <definition>SDL_DisplayMode* tnt::Window::getDisplayMode</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getDisplayMode</name>
        <briefdescription>
<para>Fill in information about the display mode used when a fullscreen window is visible. Returns nullptr on error. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SDL_DisplayMode* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="69" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a0784686d2ec700e7716cf3e6536632b6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tnt::Window::getWidth</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getWidth</name>
        <briefdescription>
<para>Returns the width of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="73" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a3edc7ba16755d7738290d5fbddce2863" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tnt::Window::getHeight</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getHeight</name>
        <briefdescription>
<para>Returns the height of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="77" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a5110873f39f5d82b63e7645395d584d1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::setWidth</definition>
        <argsstring>(int const width) noexcept</argsstring>
        <name>setWidth</name>
        <param>
          <type>int const</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Change the width of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The new width. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classtnt_1_1_window_1a7dd80702e67b56a82ceeb2adc87900b2" kindref="member">tnt::Window::setHeight</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtnt_1_1_window_1ab78f75403972e4e4b287509901c85cdd" kindref="member">tnt::Window::setSize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="83" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a7dd80702e67b56a82ceeb2adc87900b2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::setHeight</definition>
        <argsstring>(int const height) noexcept</argsstring>
        <name>setHeight</name>
        <param>
          <type>int const</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Change the height of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The new height. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classtnt_1_1_window_1a5110873f39f5d82b63e7645395d584d1" kindref="member">tnt::Window::setWidth</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtnt_1_1_window_1ab78f75403972e4e4b287509901c85cdd" kindref="member">tnt::Window::setSize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="89" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1ab78f75403972e4e4b287509901c85cdd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::setSize</definition>
        <argsstring>(int const width, int const height) noexcept</argsstring>
        <name>setSize</name>
        <param>
          <type>int const</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Change the width and height of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The new width. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The new height. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classtnt_1_1_window_1a5110873f39f5d82b63e7645395d584d1" kindref="member">tnt::Window::setWidth</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtnt_1_1_window_1a7dd80702e67b56a82ceeb2adc87900b2" kindref="member">tnt::Window::setHeight</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="96" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a70c8409c69d0c1c8194a2d485065cc8b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Uint32</type>
        <definition>Uint32 tnt::Window::getPixelFormat</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getPixelFormat</name>
        <briefdescription>
<para>Get the pixel format associated with the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unsigned int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="100" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a8d17178e7c94cec882f3be11480aa801" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Uint32</type>
        <definition>Uint32 tnt::Window::getID</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getID</name>
        <briefdescription>
<para>Get the numeric ID of a window, for logging purposes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unsigned int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="104" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a705c3769ea34040a7787759df7626530" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Uint32</type>
        <definition>Uint32 tnt::Window::getFlags</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getFlags</name>
        <briefdescription>
<para>Get the window flags. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unsigned int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="108" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a4815c405522c7990eacb933245216306" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::setTitle</definition>
        <argsstring>(char const *title) noexcept</argsstring>
        <name>setTitle</name>
        <param>
          <type>char const *</type>
          <declname>title</declname>
        </param>
        <briefdescription>
<para>Set the title of a window, in UTF-8 format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired title for the window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="112" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a2e8c81cf7d648e718ea201ee8916f5f6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>char const  *</type>
        <definition>char const* tnt::Window::getTitle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getTitle</name>
        <briefdescription>
<para>Get the title of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const char* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="116" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1ab082c5e08947cca2305dd53c336ea7a7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::setIcon</definition>
        <argsstring>(SDL_Surface *icon) noexcept</argsstring>
        <name>setIcon</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
<para>Set a surface as the window icon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>The target SDL_Surface* to be set as an icon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="120" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a2d0a216ba296d2cea4005fbdf4768d0f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::setIcon</definition>
        <argsstring>(std::string_view icon) noexcept</argsstring>
        <name>setIcon</name>
        <param>
          <type>std::string_view</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>The path of the image to be used as icon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="124" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a15066e4721f3c2823ac7e15da731f4b6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int *</type>
        <definition>int* tnt::Window::getBordersSize</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBordersSize</name>
        <briefdescription>
<para>Get the size of a window&apos;s borders (decorations) around the client area. The function&apos;s 5-th return is 0 on success,. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int* to an array with 5 members. </para>
</simplesect>
<simplesect kind="note"><para>if this function fails (returns -1), the size values of the other array members will be initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the window in question was borderless. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="132" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a23cf9f42f7bac8f406be032da57caf75" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::Clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Clear the current rendering target with the drawing color. This function clears the entire rendering target, ignoring the viewport and the clip rectangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="137" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1afd340c15aac903972edf2f98836466f5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::Render</definition>
        <argsstring>() noexcept</argsstring>
        <name>Render</name>
        <briefdescription>
<para>Update the screen with rendering performed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="140" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a7813093a8a875c4f58b6ac28fffefd60" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::handleEvents</definition>
        <argsstring>(SDL_Event const &amp;events) noexcept</argsstring>
        <name>handleEvents</name>
        <param>
          <type>SDL_Event const &amp;</type>
          <declname>events</declname>
        </param>
        <briefdescription>
<para>Handle some window-related events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>The events handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="144" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1a5cebc76587fa64e236977c387319d929" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::setClearColor</definition>
        <argsstring>(SDL_Color const &amp;color) noexcept</argsstring>
        <name>setClearColor</name>
        <param>
          <type>SDL_Color const &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the color used for drawing operations (Rect, Line and Clear). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color used to draw on the <ref refid="classtnt_1_1_window" kindref="compound">Window</ref>&apos;s renderer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="148" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1af6c9615df8ad40ece0cb41eaa1d5f4c9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tnt::Window::setClearColor</definition>
        <argsstring>(Uint8 r, Uint8 g, Uint8 b, Uint8 a) noexcept</argsstring>
        <name>setClearColor</name>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Red. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Green. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Blue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Alpha. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="155" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1ae41c402b4f271055288ee648e51de064" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>SDL_Color</type>
        <definition>SDL_Color tnt::Window::getClearColor</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getClearColor</name>
        <briefdescription>
<para>Get the color used for drawing operations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SDL_Color </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="159" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1_window_1aa5d4e3e07229be2c59d0135635103327" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tnt::Window::isOpened</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isOpened</name>
        <briefdescription>
<para>Check if the window is open so that events can be handled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="163" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class representing an application window. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/thing/cpp/tnt/include/core/Window.hpp" line="21" column="5" bodyfile="E:/thing/cpp/tnt/include/core/Window.hpp" bodystart="22" bodyend="170"/>
    <listofallmembers>
      <member refid="classtnt_1_1_window_1a23cf9f42f7bac8f406be032da57caf75" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>Clear</name></member>
      <member refid="classtnt_1_1_window_1a15066e4721f3c2823ac7e15da731f4b6" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getBordersSize</name></member>
      <member refid="classtnt_1_1_window_1ae41c402b4f271055288ee648e51de064" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getClearColor</name></member>
      <member refid="classtnt_1_1_window_1a913af425a1df97a56e2110ef71f34acf" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getDisplayIndex</name></member>
      <member refid="classtnt_1_1_window_1ae7ff24c6349d7b1716cc7267134f16e0" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getDisplayMode</name></member>
      <member refid="classtnt_1_1_window_1a705c3769ea34040a7787759df7626530" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getFlags</name></member>
      <member refid="classtnt_1_1_window_1a3edc7ba16755d7738290d5fbddce2863" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getHeight</name></member>
      <member refid="classtnt_1_1_window_1a8d17178e7c94cec882f3be11480aa801" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getID</name></member>
      <member refid="classtnt_1_1_window_1a70c8409c69d0c1c8194a2d485065cc8b" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getPixelFormat</name></member>
      <member refid="classtnt_1_1_window_1a925a862cbfddfe5978c00a3eb6fa52cd" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getRenderer</name></member>
      <member refid="classtnt_1_1_window_1a2e8c81cf7d648e718ea201ee8916f5f6" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getTitle</name></member>
      <member refid="classtnt_1_1_window_1a0784686d2ec700e7716cf3e6536632b6" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>getWidth</name></member>
      <member refid="classtnt_1_1_window_1aa250186af6f74b41514839294aba350c" prot="private" virt="non-virtual"><scope>tnt::Window</scope><name>h</name></member>
      <member refid="classtnt_1_1_window_1a7813093a8a875c4f58b6ac28fffefd60" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>handleEvents</name></member>
      <member refid="classtnt_1_1_window_1aa5d4e3e07229be2c59d0135635103327" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>isOpened</name></member>
      <member refid="classtnt_1_1_window_1a3cb26f044ada9a2dc4f981d90392cffe" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>operator SDL_Window *</name></member>
      <member refid="classtnt_1_1_window_1afd340c15aac903972edf2f98836466f5" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>Render</name></member>
      <member refid="classtnt_1_1_window_1a4a2759e110a4a06540fdc77fa0d7048c" prot="private" virt="non-virtual"><scope>tnt::Window</scope><name>renderer</name></member>
      <member refid="classtnt_1_1_window_1ab76f2033e9fed6291e8d6be961d5f3d5" prot="private" virt="non-virtual"><scope>tnt::Window</scope><name>running</name></member>
      <member refid="classtnt_1_1_window_1a5cebc76587fa64e236977c387319d929" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>setClearColor</name></member>
      <member refid="classtnt_1_1_window_1af6c9615df8ad40ece0cb41eaa1d5f4c9" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>setClearColor</name></member>
      <member refid="classtnt_1_1_window_1ac062602e457104d22ff82785df20d7fb" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>setDisplayMode</name></member>
      <member refid="classtnt_1_1_window_1a7dd80702e67b56a82ceeb2adc87900b2" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>setHeight</name></member>
      <member refid="classtnt_1_1_window_1ab082c5e08947cca2305dd53c336ea7a7" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>setIcon</name></member>
      <member refid="classtnt_1_1_window_1a2d0a216ba296d2cea4005fbdf4768d0f" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>setIcon</name></member>
      <member refid="classtnt_1_1_window_1ab78f75403972e4e4b287509901c85cdd" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>setSize</name></member>
      <member refid="classtnt_1_1_window_1a4815c405522c7990eacb933245216306" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>setTitle</name></member>
      <member refid="classtnt_1_1_window_1a5110873f39f5d82b63e7645395d584d1" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>setWidth</name></member>
      <member refid="classtnt_1_1_window_1a54936bce1568de5c3a197d1593d3fb67" prot="private" virt="non-virtual"><scope>tnt::Window</scope><name>w</name></member>
      <member refid="classtnt_1_1_window_1ac01cd4348c89071a42b3fff7fe7ddad4" prot="private" virt="non-virtual"><scope>tnt::Window</scope><name>window</name></member>
      <member refid="classtnt_1_1_window_1a0dc778038920407f422c15c418eb4c41" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>Window</name></member>
      <member refid="classtnt_1_1_window_1a6738e54fa604a1578569afb3094d1885" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>Window</name></member>
      <member refid="classtnt_1_1_window_1a03ae6311e5dfb2043c6c56583096d7c8" prot="public" virt="non-virtual"><scope>tnt::Window</scope><name>~Window</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
