<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classtnt_1_1task" kind="class" language="C++" prot="public" final="yes">
    <compoundname>tnt::task</compoundname>
    <innerclass refid="structtnt_1_1task_1_1awaiter" prot="public">tnt::task::awaiter</innerclass>
    <innerclass refid="structtnt_1_1task_1_1promise__type" prot="public">tnt::task::promise_type</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtnt_1_1task_1aaffb2e42d4076c696e464573dfe6c3ee" prot="private" static="no" mutable="no">
        <type>std::coroutine_handle&lt; <ref refid="structtnt_1_1task_1_1promise__type" kindref="compound">promise_type</ref> &gt;</type>
        <definition>std::coroutine_handle&lt;promise_type&gt; tnt::task&lt; T &gt;::coro</definition>
        <argsstring></argsstring>
        <name>coro</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Task.hpp" line="59" column="31" bodyfile="E:/thing/cpp/tnt/include/async/Task.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtnt_1_1task_1a507a2d91c5cc0a509a6bb94e981715b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tnt::task&lt; T &gt;::task</definition>
        <argsstring>(task const &amp;)=delete</argsstring>
        <name>task</name>
        <param>
          <type><ref refid="classtnt_1_1task" kindref="compound">task</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Task.hpp" line="27" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1task_1a4b5c3d267e9208384c11f4eba804e0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtnt_1_1task" kindref="compound">task</ref> &amp;</type>
        <definition>task&amp; tnt::task&lt; T &gt;::operator=</definition>
        <argsstring>(task const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtnt_1_1task" kindref="compound">task</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Task.hpp" line="28" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1task_1a29fc23f8952c9b82e6e393dc70805a7a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tnt::task&lt; T &gt;::task</definition>
        <argsstring>(task &amp;&amp;t) noexcept</argsstring>
        <name>task</name>
        <param>
          <type><ref refid="classtnt_1_1task" kindref="compound">task</ref> &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Task.hpp" line="30" column="16" bodyfile="E:/thing/cpp/tnt/include/async/Task.hpp" bodystart="30" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1task_1ac0ae131d786c2cc77db4c5af998e6c96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtnt_1_1task" kindref="compound">task</ref> &amp;</type>
        <definition>task&amp; tnt::task&lt; T &gt;::operator=</definition>
        <argsstring>(task &amp;&amp;t)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtnt_1_1task" kindref="compound">task</ref> &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Task.hpp" line="33" column="21" bodyfile="E:/thing/cpp/tnt/include/async/Task.hpp" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1task_1a65b3fdc3097593b8bcb9422b4399d92b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tnt::task&lt; T &gt;::~task</definition>
        <argsstring>() noexcept</argsstring>
        <name>~task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Task.hpp" line="40" column="16" bodyfile="E:/thing/cpp/tnt/include/async/Task.hpp" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1task_1ad5cbc9ab3c6d19414eb6733795ed86e1" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtnt_1_1task_1_1awaiter" kindref="compound">awaiter</ref></type>
        <definition>awaiter tnt::task&lt; T &gt;::operator co_await</definition>
        <argsstring>() &amp;&amp;noexcept</argsstring>
        <name>operator co_await</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Task.hpp" line="46" column="24" bodyfile="E:/thing/cpp/tnt/include/async/Task.hpp" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1task_1adc41186dc1c635baf6d39510be7e3df7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T</type>
        <definition>T tnt::task&lt; T &gt;::get</definition>
        <argsstring>() noexcept</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Task.hpp" line="48" column="18" bodyfile="E:/thing/cpp/tnt/include/async/Task.hpp" bodystart="48" bodyend="53"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtnt_1_1task_1a20cfc8374983647b6bce63e4c61a4cf0" prot="private" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tnt::task&lt; T &gt;::task</definition>
        <argsstring>(std::coroutine_handle&lt; promise_type &gt; h) noexcept</argsstring>
        <name>task</name>
        <param>
          <type>std::coroutine_handle&lt; <ref refid="structtnt_1_1task_1_1promise__type" kindref="compound">promise_type</ref> &gt;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Task.hpp" line="56" column="25" bodyfile="E:/thing/cpp/tnt/include/async/Task.hpp" bodystart="56" bodyend="57"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/thing/cpp/tnt/include/async/Task.hpp" line="21" column="5" bodyfile="E:/thing/cpp/tnt/include/async/Task.hpp" bodystart="22" bodyend="60"/>
    <listofallmembers>
      <member refid="classtnt_1_1task_1aaffb2e42d4076c696e464573dfe6c3ee" prot="private" virt="non-virtual"><scope>tnt::task</scope><name>coro</name></member>
      <member refid="classtnt_1_1task_1adc41186dc1c635baf6d39510be7e3df7" prot="public" virt="non-virtual"><scope>tnt::task</scope><name>get</name></member>
      <member refid="classtnt_1_1task_1ad5cbc9ab3c6d19414eb6733795ed86e1" prot="public" virt="non-virtual"><scope>tnt::task</scope><name>operator co_await</name></member>
      <member refid="classtnt_1_1task_1a4b5c3d267e9208384c11f4eba804e0ab" prot="public" virt="non-virtual"><scope>tnt::task</scope><name>operator=</name></member>
      <member refid="classtnt_1_1task_1ac0ae131d786c2cc77db4c5af998e6c96" prot="public" virt="non-virtual"><scope>tnt::task</scope><name>operator=</name></member>
      <member refid="classtnt_1_1task_1a507a2d91c5cc0a509a6bb94e981715b3" prot="public" virt="non-virtual"><scope>tnt::task</scope><name>task</name></member>
      <member refid="classtnt_1_1task_1a29fc23f8952c9b82e6e393dc70805a7a" prot="public" virt="non-virtual"><scope>tnt::task</scope><name>task</name></member>
      <member refid="classtnt_1_1task_1a20cfc8374983647b6bce63e4c61a4cf0" prot="private" virt="non-virtual"><scope>tnt::task</scope><name>task</name></member>
      <member refid="classtnt_1_1task_1a65b3fdc3097593b8bcb9422b4399d92b" prot="public" virt="non-virtual"><scope>tnt::task</scope><name>~task</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
