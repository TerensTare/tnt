<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="structtnt_1_1generator_1_1iterator" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>tnt::generator::iterator</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structtnt_1_1generator_1_1iterator_1a46be64cbed69715f8f23736884f1a40e" prot="public" static="no">
        <type>std::input_iterator_tag</type>
        <definition>using tnt::generator&lt; T &gt;::iterator::iterator_category =  std::input_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="90" column="9" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structtnt_1_1generator_1_1iterator_1ae105db68edf4fef16b0b0bc878d853f4" prot="public" static="no">
        <type>T</type>
        <definition>using tnt::generator&lt; T &gt;::iterator::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="91" column="9" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structtnt_1_1generator_1_1iterator_1acc36dbd28f713add67092c4c70507227" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using tnt::generator&lt; T &gt;::iterator::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="92" column="9" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structtnt_1_1generator_1_1iterator_1a96343671d95d09ed4ba0df0a209fbc85" prot="public" static="no">
        <type>T *</type>
        <definition>using tnt::generator&lt; T &gt;::iterator::pointer =  T *</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="93" column="9" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structtnt_1_1generator_1_1iterator_1a19743ae909178bdba63f401855a2258b" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using tnt::generator&lt; T &gt;::iterator::reference =  T &amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="94" column="9" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structtnt_1_1generator_1_1iterator_1a8a91de6187e8f257c17bb56c5f9f19bf" prot="public" static="no" mutable="no">
        <type>std::coroutine_handle&lt; typename <ref refid="classtnt_1_1generator" kindref="compound">generator</ref>&lt; T &gt;::<ref refid="structtnt_1_1generator_1_1promise__type" kindref="compound">promise_type</ref> &gt;</type>
        <definition>std::coroutine_handle&lt;typename generator&lt;T&gt;::promise_type&gt; tnt::generator&lt; T &gt;::iterator::coro</definition>
        <argsstring></argsstring>
        <name>coro</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="114" column="32" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structtnt_1_1generator_1_1iterator_1a7c0f99363a87dbfbe8ec4f10914b8f35" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tnt::generator&lt; T &gt;::iterator::iterator</definition>
        <argsstring>(std::nullptr_t) noexcept</argsstring>
        <name>iterator</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="96" column="16" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structtnt_1_1generator_1_1iterator_1aeea7d6950931d56fad0de2651708ef2e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tnt::generator&lt; T &gt;::iterator::iterator</definition>
        <argsstring>(std::coroutine_handle&lt; typename generator&lt; T, Alloc &gt;::promise_type &gt; handle) noexcept</argsstring>
        <name>iterator</name>
        <param>
          <type>std::coroutine_handle&lt; typename <ref refid="classtnt_1_1generator" kindref="compound">generator</ref>&lt; T, Alloc &gt;::<ref refid="structtnt_1_1generator_1_1promise__type" kindref="compound">promise_type</ref> &gt;</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="97" column="16" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structtnt_1_1generator_1_1iterator_1aace32136c77d61306861a0778028d812" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtnt_1_1generator_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
        <definition>iterator&amp; tnt::generator&lt; T &gt;::iterator::operator++</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="99" column="25" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="structtnt_1_1generator_1_1iterator_1a9ff83ee9a25a3039cf085101562f3d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtnt_1_1generator_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator tnt::generator&lt; T &gt;::iterator::operator++</definition>
        <argsstring>(int)=delete</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="107" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structtnt_1_1generator_1_1iterator_1ad3ac8275957c209ff656d0250d3443a2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T const  &amp;</type>
        <definition>T const&amp; tnt::generator&lt; T &gt;::iterator::operator*</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="109" column="24" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structtnt_1_1generator_1_1iterator_1a990bdfbcd0cba560218c797bfebf921e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T const  *</type>
        <definition>T const* tnt::generator&lt; T &gt;::iterator::operator-&gt;</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="110" column="24" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="structtnt_1_1generator_1_1iterator_1a7f8dc4be09095ee7df9ef9d44277770d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tnt::generator&lt; T &gt;::iterator::operator==</definition>
        <argsstring>(iterator const &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structtnt_1_1generator_1_1iterator" kindref="compound">iterator</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="112" column="21" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="112" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/thing/cpp/tnt/include/async/Generator.hpp" line="88" column="5" bodyfile="E:/thing/cpp/tnt/include/async/Generator.hpp" bodystart="89" bodyend="115"/>
    <listofallmembers>
      <member refid="structtnt_1_1generator_1_1iterator_1a8a91de6187e8f257c17bb56c5f9f19bf" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>coro</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1acc36dbd28f713add67092c4c70507227" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>difference_type</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1a7c0f99363a87dbfbe8ec4f10914b8f35" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>iterator</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1aeea7d6950931d56fad0de2651708ef2e" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>iterator</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1a46be64cbed69715f8f23736884f1a40e" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>iterator_category</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1ad3ac8275957c209ff656d0250d3443a2" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>operator*</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1aace32136c77d61306861a0778028d812" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>operator++</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1a9ff83ee9a25a3039cf085101562f3d8f" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>operator++</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1a990bdfbcd0cba560218c797bfebf921e" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>operator-&gt;</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1a7f8dc4be09095ee7df9ef9d44277770d" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>operator==</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1a96343671d95d09ed4ba0df0a209fbc85" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>pointer</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1a19743ae909178bdba63f401855a2258b" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>reference</name></member>
      <member refid="structtnt_1_1generator_1_1iterator_1ae105db68edf4fef16b0b0bc878d853f4" prot="public" virt="non-virtual"><scope>tnt::generator::iterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
