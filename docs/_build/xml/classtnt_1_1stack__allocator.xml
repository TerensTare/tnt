<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classtnt_1_1stack__allocator" kind="class" language="C++" prot="public">
    <compoundname>tnt::stack_allocator</compoundname>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtnt_1_1stack__allocator_1a1265a8a793254b1706eef56c348a030c" prot="public" static="no">
        <type>T</type>
        <definition>using tnt::stack_allocator&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="21" column="9" bodyfile="E:/thing/cpp/tnt/include/exp/Allocator.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtnt_1_1stack__allocator_1a298feedf41e2b1410164ea3cc2dbd971" prot="private" static="no" mutable="no">
        <type>T **</type>
        <definition>T** tnt::stack_allocator&lt; T &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="57" column="11" bodyfile="E:/thing/cpp/tnt/include/exp/Allocator.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtnt_1_1stack__allocator_1a1449484eb8d5303623464e3ab134563a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tnt::stack_allocator&lt; T &gt;::stack_ptr</definition>
        <argsstring></argsstring>
        <name>stack_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="58" column="13" bodyfile="E:/thing/cpp/tnt/include/exp/Allocator.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtnt_1_1stack__allocator_1a7007b3c53cc83625531f0e627538e29e" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr tnt::stack_allocator&lt; T &gt;::stack_allocator</definition>
        <argsstring>(std::size_t S) noexcept</argsstring>
        <name>stack_allocator</name>
        <param>
          <type>std::size_t</type>
          <declname>S</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="23" column="28" bodyfile="E:/thing/cpp/tnt/include/exp/Allocator.hpp" bodystart="23" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1stack__allocator_1a2a9e02bfa037812ebdac498e2616c590" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr tnt::stack_allocator&lt; T &gt;::stack_allocator</definition>
        <argsstring>(stack_allocator&lt; U &gt; const &amp;) noexcept=delete</argsstring>
        <name>stack_allocator</name>
        <param>
          <type><ref refid="classtnt_1_1stack__allocator" kindref="compound">stack_allocator</ref>&lt; U &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="31" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1stack__allocator_1a228c1239bce0ed1bc8b826c9d6fa4d99" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classtnt_1_1stack__allocator" kindref="compound">stack_allocator</ref> &amp;</type>
        <definition>constexpr stack_allocator&amp; tnt::stack_allocator&lt; T &gt;::operator=</definition>
        <argsstring>(stack_allocator&lt; U &gt; const &amp;) noexcept=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtnt_1_1stack__allocator" kindref="compound">stack_allocator</ref>&lt; U &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="34" column="35"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1stack__allocator_1aa74896d93f3a4c3922fe3a96f3f2abbc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr tnt::stack_allocator&lt; T &gt;::stack_allocator</definition>
        <argsstring>(stack_allocator const &amp;) noexcept=delete</argsstring>
        <name>stack_allocator</name>
        <param>
          <type><ref refid="classtnt_1_1stack__allocator" kindref="compound">stack_allocator</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="36" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1stack__allocator_1aaa5886fc6ad35af910ed86b1b937383e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classtnt_1_1stack__allocator" kindref="compound">stack_allocator</ref> &amp;</type>
        <definition>constexpr stack_allocator&amp; tnt::stack_allocator&lt; T &gt;::operator=</definition>
        <argsstring>(stack_allocator const &amp;) noexcept=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtnt_1_1stack__allocator" kindref="compound">stack_allocator</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="37" column="35"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1stack__allocator_1a0967557cf9ac15c591ef71cb71b999fe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tnt::stack_allocator&lt; T &gt;::~stack_allocator</definition>
        <argsstring>() noexcept</argsstring>
        <name>~stack_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="39" column="9" bodyfile="E:/thing/cpp/tnt/include/exp/Allocator.hpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1stack__allocator_1a8393f6687b470d96ce0e3c2665dac672" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr T *</type>
        <definition>constexpr T* tnt::stack_allocator&lt; T &gt;::allocate</definition>
        <argsstring>() noexcept</argsstring>
        <name>allocate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="44" column="22" bodyfile="E:/thing/cpp/tnt/include/exp/Allocator.hpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classtnt_1_1stack__allocator_1ab49a49da46660bc85407e739db7008e7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void tnt::stack_allocator&lt; T &gt;::deallocate</definition>
        <argsstring>() noexcept</argsstring>
        <name>deallocate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="50" column="24" bodyfile="E:/thing/cpp/tnt/include/exp/Allocator.hpp" bodystart="50" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/thing/cpp/tnt/include/exp/Allocator.hpp" line="14" column="5" bodyfile="E:/thing/cpp/tnt/include/exp/Allocator.hpp" bodystart="15" bodyend="59"/>
    <listofallmembers>
      <member refid="classtnt_1_1stack__allocator_1a8393f6687b470d96ce0e3c2665dac672" prot="public" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>allocate</name></member>
      <member refid="classtnt_1_1stack__allocator_1a298feedf41e2b1410164ea3cc2dbd971" prot="private" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>data</name></member>
      <member refid="classtnt_1_1stack__allocator_1ab49a49da46660bc85407e739db7008e7" prot="public" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>deallocate</name></member>
      <member refid="classtnt_1_1stack__allocator_1a228c1239bce0ed1bc8b826c9d6fa4d99" prot="public" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>operator=</name></member>
      <member refid="classtnt_1_1stack__allocator_1aaa5886fc6ad35af910ed86b1b937383e" prot="public" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>operator=</name></member>
      <member refid="classtnt_1_1stack__allocator_1a7007b3c53cc83625531f0e627538e29e" prot="public" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>stack_allocator</name></member>
      <member refid="classtnt_1_1stack__allocator_1a2a9e02bfa037812ebdac498e2616c590" prot="public" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>stack_allocator</name></member>
      <member refid="classtnt_1_1stack__allocator_1aa74896d93f3a4c3922fe3a96f3f2abbc" prot="public" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>stack_allocator</name></member>
      <member refid="classtnt_1_1stack__allocator_1a1449484eb8d5303623464e3ab134563a" prot="private" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>stack_ptr</name></member>
      <member refid="classtnt_1_1stack__allocator_1a1265a8a793254b1706eef56c348a030c" prot="public" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>value_type</name></member>
      <member refid="classtnt_1_1stack__allocator_1a0967557cf9ac15c591ef71cb71b999fe" prot="public" virt="non-virtual"><scope>tnt::stack_allocator</scope><name>~stack_allocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
